<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript5.0"><![CDATA[/*
 ===============================================================================
 == Util관련 공통함수들은 여기에 작성한다.
 ===============================================================================
 ● gfn_isHTML5       : 실행되는 환경을 체크
 ● gfn_Decode        : Grid에서 expression으로  표현할때 decode 문처럼 사용할 수 있는 기능.
 ● gfn_Iif           : 조건에 따른 Value 처리
 ● gfn_checkURL      : 입력값이 URL Type인지 체크하는 함수
 ● gfn_checkEmail    : 입력값이 e-mail Type인지 체크하는 함수
 ● gfn_checkPhone    : 입력값이 전화번호 format 인지 체크하는 함수
 ● gfn_getFileExt    : 파일 확장자를 가져온다.
 ● gfn_htmlToChars   : html형식의 문자열에서 태그문자를 특수문자로 변형
 ● gfn_SpecToChars   : 특수문자가 들어있는 문자열에서 html형식의 문자로 변형
 ● gfn_getDomainText : 메세지 값을 문자열 치환하여 메세지 내용을 조회
 */

/**********************************************************************************
 * Function Name: gfn_isHTML5
 * Description  : 실행되는 환경을 체크
 * Arguments    :
 * return       : Boolean
 **********************************************************************************/
this.gfn_isHTML5 = function ()
{
		return true;
}

/**********************************************************************************
 * Function Name: gfn_Decode
 * Description  : Grid에서 expression으로  표현할때 decode 문처럼 사용할 수 있는 기능.
 * Arguments    : decode(strVal, "test", true, false);
 * return       : varRtnValue 로 decode 조건에 맞는 값 리턴.
 **********************************************************************************/
this.gfn_Decode = function ()
{
	var varRtnValue = null;

	var arrArgument = this.lookup("decode").arguments;
	var varValue = arrArgument[0];
	var bIsDefault = false;
	var nCount = 0;


	if ((arrArgument.length % 2) == 0) 
	{
		nCount = arrArgument.length - 1;
		bIsDefault = true;
	}
	else 
	{
		nCount = arrArgument.length;
		bIsDefault = false;
	}

	for (var i = 1; i < nCount; i += 2) 
	{
		if (varValue == arrArgument[i]) 
		{
			varRtnValue = arrArgument[i + 1];
			i = nCount;
		}
	}

	if (varRtnValue == null && bIsDefault) 
	{
		varRtnValue = arrArgument[arrArgument.length - 1];
	}

	return varRtnValue;
}

/**********************************************************************************
 * Function Name: gfn_Iif
 * Description  : 조건에 따른 Value 처리
 * Arguments    : iif(strVal=="test", true, false);
 * return       : iif 조건에 맞는 값 리턴.
 **********************************************************************************/
this.gfn_Iif = function ()
{
	var varRtnValue = null;
	var arrArgument = this.lookup("iif").arguments;

	if (arrArgument[0]) 
	{
		return arrArgument[1];
	}
	else 
	{
		return arrArgument[2];
	}
}

/********************************************************************************
 * Function Name: gfn_checkURL
 * Description  : 입력값이 URL Type인지 체크하는 함수
 * Arguments	: strValue(String)
 * Return 		: true = 입력값이 URL형태일 경우
 ********************************************************************************/
this.gfn_checkURL = function (strValue)
{
	if (this.gfn_isNull(strValue)) 
	{
		return false;
	}
	else if (strValue.indexOf(".") == -1) 
	{
		return false;
	}
	else 
	{
		return true;
	}
}


/********************************************************************************
 * Function Name: gfn_checkEmail
 * Description  : 입력값이 e-mail Type인지 체크하는 함수
 * Arguments	: strValue(String)
 * Return 		: true = 입력값이 email형태일 경우
 ********************************************************************************/
this.gfn_checkEmail = function (strValue)
{
	if (this.gfn_isNull(strValue)) 
	{
		return false;
	}

	var nIndexOfAt = strValue.indexOf("@");
	var nIndexOfDot = strValue.indexOf(".");
	var nLength = strValue.length;

	// "@" 이 하나도 없거나 맨 끝에 위치한  경우
	if (nIndexOfAt <= 0 || nIndexOfAt == nLength) 
	{
		return false;
	}

	// "." 이 하나도 없거나 맨 끝에 위치한 경우
	if (nIndexOfDot <= 0 || nIndexOfDot == nLength) 
	{
		return false;
	}

	// "@"이 두개 이상 존재하는 경우
	if (strValue.indexOf("@", nIndexOfAt + 1) != -1) 
	{
		return false;
	}

	// ".@" 인 경우 또는 "@."인 경우
	if (strValue.substr(nIndexOfAt - 1, 1) == "." || strValue.substr(nIndexOfAt + 1, 1) == ".") 
	{
		return false;
	}

	// "@" 이후에 "."이 존재하지 않는 경우
	if (strValue.indexOf(".", (nIndexOfAt + 2)) == -1) 
	{
		return false;
	}

	// 공백문자가 존재하는 경우
	if (strValue.indexOf(" ") != -1) 
	{
		return false;
	}

	return true;
}

/********************************************************************************
 * Function Name: gfn_checkPhone
 * Description	: 입력값이 전화번호 format 인지 체크하는 함수
 * Arguments	: strValue(String)
 * Return 		: true = 입력값이 전화번호 형태일 경우
 ********************************************************************************/
this.gfn_checkPhone = function (strValue)
{
	// null 이거나 "-"이 존재하지 않는 경우
	if (this.gfn_isNull(strValue) || (!this.gfn_isNull(strValue) && strValue.indexOf("-") == -1)) 
	{
		return false;
	}
	else if (strValue.indexOf(".") >= 0) 
	{
		return false;
	}
	else 
	{
		// "-" 사이의 값이 숫자가 아닌 경우
		var arrNumbers = strValue.split("-");
		for (var i = 0; i < arrNumbers.length; i++) 
		{
			if (!TOBE.isNumeric(arrNumbers[i])) 
			{
				return false;
			}
		}
	}
	return true;
}

/********************************************************************************
 * Function Name	: gfnCheckDate8
 * Description		: 입력값이 날짜 형태 인지 체크하는 함수
 * Arguments		: strValue(String)
 * Return 			: true = 입력값이 8자리 날짜(yyyyMMdd) 형태일 경우
 ********************************************************************************/
this.gfn_checkDate8 = function (strValue)
{
	if (this.gfn_Length(strValue) != 8) 
	{
		return false;
	}
	else if (!this.gfn_DateCheck(strValue)) 
	{
		return false;
	}
	return true;
}

/********************************************************************************
 * Function Name	: gfnCheckDate10
 * Description  	: 입력값이 날짜 형태 인지 체크하는 함수
 * Arguments		: strValue(String)
 * Return 			: true = 입력값이 10자리 날짜 형태일 경우
 *					  허용 입력 타입(yyyy-MM-dd, yyyy/MM/dd, yyyy.MM.dd)
 ********************************************************************************/
this.gfn_checkDate10 = function (strValue)
{
	return this.gfn_checkDate8(this.gfn_Replace(this.gfn_Replace(this.gfn_Replace(strValue, "/", ""), "-", ""), ".", ""));
}

/********************************************************************************
 * Function Name: gfn_getFileExt
 * Description  : 파일 확장자를 가져온다.
 * Arguments	: 파일명
 * Return 		: String, 파일 확장자
 ********************************************************************************/
this.gfn_getFileExt = function (strFileName)
{
	strFileName = "" + strFileName;
	var arrFileName = strFileName.split(".");
	var strFileExt = arrFileName[arrFileName.length - 1];

	return strFileExt.trim();
}

/********************************************************************************
 * Function Name: gfn_getFileName
 * Description  : 파일 경로에서 파일명만 가져온다.
 * Arguments	: 파일명
 * Return 		: String, 파일명
 ********************************************************************************/
this.gfn_getFileName = function (strFilePath)
{
	var strFileName = "";

	strFilePath = this.gfn_ToString(strFilePath);
	for (var i = 0; i < strFilePath.length; i++) 
	{
		if (this.gfn_Right(strFilePath, i + 1).indexOf("\\") > -1) 
		{
			break;
		}
		if (this.gfn_Right(strFilePath, i + 1).indexOf("\/") > -1) 
		{
			break;
		}
		strFileName = this.gfn_Right(strFilePath, i + 1);
	}

	return strFileName;
}

/********************************************************************************
 * Function Name: gfn_htmlToChars
 * Description  : html형식의 문자열에서 태그문자를 특수문자로 변형
 * Arguments	: html형식 문자열
 * Return 		: String, 변형문자열
 ********************************************************************************/
this.gfn_htmlToChars = function (str)
{
	str = "" + str;
	if (this.gfn_isNull(str)) 
	{
		return "";
	}
	str = this.gfn_Replace(str, "\&", '&amp;');
	str = this.gfn_Replace(str, "\'", '&apos;');
	str = this.gfn_Replace(str, "\"", '&quot;');
	str = this.gfn_Replace(str, "\'", '&#39;');
	str = this.gfn_Replace(str, "<", '&lt;');
	str = this.gfn_Replace(str, ">", '&gt;');
	return str;
}

/********************************************************************************
 * Function Name: gfn_SpecToChars
 * Description  : 특수문자가 들어있는 문자열에서 html형식의 문자로 변형
 * Arguments	: 특수문자 형식 문자열
 * Return 		: String, 파일 확장자
 ********************************************************************************/
this.gfn_SpecToChars = function (str)
{
	str = "" + str;
	if (this.gfn_isNull(str)) 
	{
		return "";
	}
	str = this.gfn_Replace(str, "\&amp;", '&');
	str = this.gfn_Replace(str, "\&quot;", '"');
	str = this.gfn_Replace(str, "\&#39;", '\'');
	str = this.gfn_Replace(str, "\&lt;", '<');
	str = this.gfn_Replace(str, "\&gt;", '>');
	return str;
}

/********************************************************************
 * Function Name: gfn_getDomainText
 * Description  : 메세지 값을 문자열 치환하여 메세지 내용을 조회한다.
 * Arguments    : TextID: 메세지ID, aArgs: 토큰문자배열
 * 리턴 : 처리 메시지
 ********************************************************************/
this.gfn_getDomainText = function (TextID, aArgs)
{
	// alert("Util 256 " + TextID);

	if (this.gfn_isNull(TextID)) 
	{
		return "";
	}
	
	var nRow = application.gds_DomainText.findRow(application.gv_DomainIdCol, TextID);
	if (nRow < 0) 
	{
		return TextID;
	}


	var sRtnMsg = application.gds_DomainText.getColumn(nRow, application.gv_DomainTextCol);

	if (this.gfn_isNull(aArgs)) 
	{
		return sRtnMsg;
	}

	var sType = typeof (aArgs);

	switch (sType) 
	{
		case "object":
			if (aArgs.length > 0) 
			{
				for (var i = 0; i < aArgs.length; i++) 
				{
					var strVal  = aArgs[i];
					sRtnMsg = this.gfn_Replace(sRtnMsg, application.gv_TxtPrefix + (i + 1),  this.gfn_getDomainText(strVal));
				}
			}
			else 
			{
				for (var strName; ; ) 
				{
					var strVal  = aArgs[strName];
			
					sRtnMsg = this.gfn_Replace(sRtnMsg, application.gv_TxtPrefix + strName, this.gfn_getDomainText(strVal));
				}
			}
			break;
		default:
			sRtnMsg = this.gfn_Replace(sRtnMsg, application.gv_TxtPrefix + "1", this.gfn_getDomainText(aArgs));
			break;
	}
	return sRtnMsg;
}



/*****************************************************************************************
 * 함  수  명	: 	fn_getObjFont
 * 입      력	: 	iFontSize
 sFontName
 * 반      환	: 	Font Object
 * 기      능	: 	Font Object 생성 반환
 *****************************************************************************************/
this.gfn_getObjFont = function (iFontSize, sFontName, bBold)
{
	var strFont = sFontName + "," + iFontSize;
	if (bBold == true) 
	{
		strFont += ",bold";
	}
	return strFont;
}

this.gfn_Today = function ()
{
	var strToday = "";
	var objDate = new Date();

	var strToday = objDate.getFullYear().toString();
	strToday += this.gfn_Right("0" + (objDate.getMonth() + 1), 2);
	strToday += this.gfn_Right("0" + objDate.getDate(), 2);

	return strToday;
}

this.gfn_getDiffDay = function (sFdate, sTdate,sDayGbn)
{
	sFdate = new String(sFdate);
	sFdate = sFdate.split(" ").join("").split("-").join("").split("/").join("");
	sTdate = new String(sTdate);
	sTdate = sTdate.split(" ").join("").split("-").join("").split("/").join("");

	sFdate = this.gfn_Left(sFdate, 8);
	sTdate = this.gfn_Left(sTdate, 8);

	if (sFdate.length != 8 || sTdate.length != 8
		 || TOBE.isNumeric(sFdate) == false || TOBE.isNumeric(sTdate) == false
		 || this.gfn_getDay(sFdate) == -1 || this.gfn_getDay(sTdate) == -1) 
	{
		return null;
	}

	var nDiffDate = this.gfn_StrToDate(sTdate) - this.gfn_StrToDate(sFdate);
	var nDay = 1000 * 60 * 60 * 24;

	nDiffDate = parseInt(nDiffDate / nDay);
	if (nDiffDate < 0) 
	{
		nDiffDate = nDiffDate - 1;
	}
	else 
	{
		nDiffDate = nDiffDate + 1;
	}

	if (sDayGbn != "00"){
		nDiffDate=nDiffDate-0.5;	
	}
	return nDiffDate;
}

this.gfn_Left = function (Val, nSize)
{
	return this.gfn_ToString(Val).substr(0, nSize);
}

this.gfn_Right = function (Val, nSize)
{
	var nStart = this.gfn_ToString(Val).length;
	var nEnd = Number(nStart) - Number(nSize);
	var rtnVal = Val.substring(nStart, nEnd);

	return rtnVal;
}

this.gfn_getDay = function (sDate)
{
	var objDate = this.gfn_StrToDate(sDate);
	return objDate.getDay();
}

this.gfn_StrToDate = function (sDate)
{
	var nYear = parseInt(sDate.substr(0, 4));
	var nMonth = parseInt(sDate.substr(4, 2)) - 1;
	var nDate = parseInt(sDate.substr(6, 2));

	return new Date(nYear, nMonth, nDate);
}

this.gfn_ToString = function (Val)
{
	if (this.gfn_isNull(Val)) 
	{
		return new String();
	}
	return new String(Val);
}

/*
 ===============================================================================
 == 날짜관련 공통함수들은 여기에 작성한다.
 ===============================================================================
 ● gfn_Today : 해당 PC(단말)의 오늘 날짜를 가져온다.
 ● gfn_TodayTime : 해당 PC(단말)의 오늘 날짜+시간를 가져온다.
 ● gfn_AddDate : 입력된 날자에 OffSet 으로 지정된 만큼의 일을 더한다.
 ● gfn_AddMonth : 입력된 날자에 OffSet 으로 지정된 만큼의 달을 더한다.
 ● gfn_Datetime : MiPlatform에서 사용하던 Datetime형식으로 변환
 
 ● gfn_GetDiffDay : 2개의 날짜간의 Day count
 ● gfn_DateCheck : 날짜에 대한 형식 체크
 ● gfn_GetDay : 입력된 날자로부터 요일을 구함
 
 ● gfn_GetDayName : 입력된 날자로부터 요일명을 구함
 ● gfn_IsLeapYear : 윤년여부 확인
 ● gfn_LastDateNum : 해당월의 마지막 날짜를 숫자로 구하기
 
 ● gfn_LastDate : 해당월의 마지막 날짜를 yyyyMMdd형태로 구하기
 
 //● gfn_Solar2Lunar : 양력을 음력으로 변환해주는 함수 (처리가능 기간  1841 - 2043년)
 //● gfn_Lunar2Solar : 음력을 양력으로 변환해주는 함수 (처리가능 기간  1841 - 2043년)
 //● gfn_GetHolidays : 양력 nYear에 해당하는 년도의 법정 공휴일(양력) List 모두 구하기
 
 ● _SolarBase      : 각 월별 음력 기준 정보를 처리하는 함수(처리가능 기간  1841 - 2043년) 단, 내부에서 사용하는 함수임
 ● gfn_DateToStr   : 날짜타입을 문자열로 변환
 ● gfn_StrToDate   : 문자타입을 날짜로 변환
 ● gfn_getEpTime   : 총사용시간을 구한다.
 */

/*******************************************************************************
 * Function명 : gfn_IsDate
 * 설명       : 날짜에 대한 형식 체크
 * parameter  : None
 * return     : string
 ******************************************************************************/
this.gfn_IsDate = function (v)
{
	return this.gfn_DateCheck(v);
}

/*******************************************************************************
 * Function명 : gfn_Today
 * 설명          : 해당 PC의 오늘 날짜를 가져온다.
 * parameter  : None
 * return        : string
 ******************************************************************************/
this.gfn_Today = function ()
{
	var strToday = "";
	var objDate = new Date();
	/*
	 var strToday  = objDate.getFullYear() + "";
	 strToday += gfn_Right("0" + (objDate.getMonth() + 1), 2);
	 strToday += gfn_Right("0" + objDate.getDate(), 2);
	 */
	// return objDate.toFormatString("%Y%m%d"); --> Ajax:error, Runtime:ok - 개발주의, Ajax에서 toFormatString함수가 정상동작 하지 않아 아래 로직으로 수정함

	var yyyy = objDate.getFullYear();
	var month = objDate.getMonth() + 1;
	var day = objDate.getDate();

	strToday = String(yyyy) + String(month).padLeft(2, "0") + String(day).padLeft(2, "0");
	objDate = null;

	return strToday;
}

/*******************************************************************************
 * Function명 : gfn_TodayTime
 * 설명       : 해당 PC의 오늘 날짜+시간를 가져온다.
 * parameter : None
 * return         : string
 ******************************************************************************/
this.gfn_TodayTime = function ()
{
	var strToday = "";
	var objDate = new Date();
	/*
	 var strToday  = objDate.getFullYear() + "";
	 strToday += gfn_Right("0" + (objDate.getMonth() + 1), 2);
	 strToday += gfn_Right("0" + objDate.getDate(), 2);
	 strToday += gfn_Right("0" + objDate.getHours(), 2);
	 strToday += gfn_Right("0" + objDate.getMinutes(), 2);
	 strToday += gfn_Right("0" + objDate.getSeconds(), 2);
	 */
	// return objDate.toFormatString("%Y%m%d%H%M%S");  --> Ajax에서 toFormatString함수가 정상동작 하지 않아 아래 로직으로 수정함

	var hh = objDate.getHours();
	var mm = objDate.getMinutes();
	var ss = objDate.getSeconds();

	var yyyy = objDate.getFullYear();
	var month = objDate.getMonth() + 1;
	var day = objDate.getDate();

	strToday = String(yyyy) + String(month).padLeft(2, "0") + String(day).padLeft(2, "0") + String(hh).padLeft(2, "0") + String(mm).padLeft(2, "0") + String(ss).padLeft(2, "0");
	objDate = null;

	return strToday;
}

/**********************************************************************************
 * 함수명      : gfn_AddDate
 * 설명        : 입력된 날자에 OffSet 으로 지정된 만큼의 일을 더한다.
 *               Date Type을 String으로 변환
 * argument    : date ('yyyyMMdd' 형태로 표현된 날자)
 *               nOffSet (날짜로부터 증가 감소값. 지정하지 않으면 Default Value = 1 로 적용됩니다)
 * return Type : String
 * return 내용 : Date에 nOffset이 더해진 결과를 'yyyyMMdd'로 표현된 날자.
 **********************************************************************************/
this.gfn_AddDate = function (date, nOffSet)
{
	date = date.substr(0, 8);
	var tempDate = this.gfn_StrToDate(date);
	
	var tempAddDate = tempDate.addDate(nOffSet);
	tempDate = new Date(tempAddDate);
	return this.gfn_DateFormatString(tempDate, "%Y%m%d");
}

/**********************************************************************************
 * 함수명      : gfn_AddMonth
 * 설명        : 입력된 날자에 OffSet 으로 지정된 만큼의 달을 더한다.
 *               Date Type을 String으로 변환
 * argument    : date ('yyyyMMdd' 형태로 표현된 날자)
 *               nOffSet (날짜로부터 증가 감소값. 지정하지 않으면 Default Value = 1 로 적용됩니다)
 * return Type : String
 * return 내용 : Date에 nOffset이 더해진 결과를 'yyyyMMdd'로 표현된 날자.
 **********************************************************************************/
this.gfn_AddMonth = function (date, nOffSet)
{
	var tempDate = this.gfn_StrToDate(date);

	var tempAddMonth = tempDate.addMonth(nOffSet);
	tempDate = new Date(tempAddMonth);
	return this.gfn_DateFormatString(tempDate, "%Y%m%d");
}

/**********************************************************************************
 * 함수명      : gfn_Datetime
 * 설명        : MiPlatform에서 사용하던 Datetime형식으로 변환
 *               Date Type을 String으로 변환
 * argument    : nYear (년도)
 *               nMonth (월)
 *               nDate (일)
 * return Type : String
 * return 내용 : 조합한 날짜를 리턴
 **********************************************************************************/
this.gfn_Datetime = function (nYear, nMonth, nDate)
{
	if (nYear.toString().trim().length >= 5) 
	{
		var sDate = new String(nYear);
		var nYear = sDate.substr(0, 4);
		var nMonth = sDate.substr(4, 2);
		var nDate = ((sDate.substr(6, 2) == "") ? 1 : sDate.substr(6, 2));
		var nHours = ((sDate.substr(8, 2) == "") ? 0 : sDate.substr(8, 2));
		var nMinutes = ((sDate.substr(10, 2) == "") ? 0 : sDate.substr(10, 2));
		var nSeconds = ((sDate.substr(12, 2) == "") ? 0 : sDate.substr(12, 2));

		var objDate = new Date(parseInt(nYear, 10), parseInt(nMonth, 10) - 1, parseInt(nDate, 10), parseInt(nHours, 10), parseInt(nMinutes, 10), parseInt(nSeconds, 10));
	}
	else 
	{
		var objDate = new Date(parseInt(nYear, 10), parseInt(nMonth, 10) - 1, parseInt(((nDate == null) ? 1 : nDate), 10));
	}

	var strYear = objDate.getFullYear() + "";
	var strMonth = (objDate.getMonth() + 1).toString();
	var strDate = objDate.getDate().toString();

	if (strMonth.length == 1) 
	{
		strMonth = "0" + strMonth;
	}
	if (strDate.length == 1) 
	{
		strDate = "0" + strDate;
	}

	return strYear + strMonth + strDate;
}

/******************************************************************************
 * Function명 : gfn_GetDiffDay
 * 사용법 : gfn_GetDiffDay("20090808", "20091001")
 * 설명       : 2개의 날짜간의 Day count
 * Params     : sFdate   시작일자
 *              sTdate   종료일자
 * Return     : 양 일자간의 Day count
 ******************************************************************************/
this.gfn_GetDiffDay = function (sFdate, sTdate)
{
	sFdate = new String(sFdate);
	sFdate = sFdate.split(" ").join("").split("-").join("").split("/").join("");
	sTdate = new String(sTdate);
	sTdate = sTdate.split(" ").join("").split("-").join("").split("/").join("");

	sFdate = this.gfn_Left(sFdate, 8);
	sTdate = this.gfn_Left(sTdate, 8);

	if (sFdate.length != 8 || sTdate.length != 8
		 || isNumeric(sFdate) == false || isNumeric(sTdate) == false
		 || this.gfn_GetDay(sFdate) == -1 || this.gfn_GetDay(sTdate) == -1) 
	{
		return null;
	}

	var nDiffDate = this.gfn_StrToDate(sTdate) - this.gfn_StrToDate(sFdate);
	var nDay = 1000 * 60 * 60 * 24;

	nDiffDate = parseInt(nDiffDate / nDay, 10);
	if (nDiffDate < 0) 
	{
		nDiffDate = nDiffDate - 1;
	}
	else 
	{
		nDiffDate = nDiffDate + 1;
	}

	return nDiffDate;
}

/******************************************************************************
 * Function명 : gfn_DateCheck
 * 설명       : 날짜에 대한 형식 체크
 * Params     : sFdate   검사일자
 * Return     : 유효성반환 (날짜형식이 아닐경우 FLASE)
 ******************************************************************************/
this.gfn_DateCheck = function (sDate)
{
	sDate = sDate.split(" ").join("").split("-").join("").split("/").join("");

	if (isNumeric(sDate) == false || this.gfn_GetDay(sDate) == -1/*|| datetime(sDate) == datetime("00000101")*/) 
	{
		return false;
	}

	return true;
}

/******************************************************************************
 * Function명 : gfn_GetDay
 * 설명       : 입력된 날자로부터 요일을 구함
 * Params     : sDate  8자리 형식으로된 날짜. yyyyMMdd의 형식으로 입력됩니다.
 * Return     : 요일에 따른 숫자.
 *              0 = 일요일 ~ 6 = 토요일 로 대응됩니다.
 *              오류가 발생할 경우 -1이 Return됩니다.
 ******************************************************************************/
this.gfn_GetDay = function (sDate)
{
	var objDate = this.gfn_StrToDate(sDate);
	return objDate.getDay();
}


/******************************************************************************
 * Function명 : gfn_GetDayName
 * 설명       : 입력된 날자로부터 요일명을 구함
 * Params     : sDate  8자리 형식으로된 날짜. yyyyMMdd의 형식으로 입력됩니다.
 * Return     : 요일명
 
 ******************************************************************************/
this.gfn_GetDayName = function (sDate)
{
	var objDayName = new Array("SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT");
	var objDate = this.gfn_GetDay(sDate);

	return objDayName[objDate];
}

/******************************************************************************
 * Function명 : gfn_IsLeapYear
 * 설명       : 윤년여부 확인
 * Params     : sDate : yyyyMMdd형태의 날짜 ( 예 : "20121122" )
 * Return     :
 *              	- sDate가 윤년인 경우 = true
 *					- sDate가 윤년이 아닌 경우 = false
 *   				- sDate가 입력되지 않은 경우 = false
 ******************************************************************************/
this.gfn_IsLeapYear = function (sDate)
{
	var ret;
	var nY;

	if (this.gfn_isNull(sDate)) 
	{
		return false;
	}

	nY = parseInt(sDate.substring(0, 4), 10);

	if ((nY % 4) == 0) 
	{
		if ((nY % 100) != 0 || (nY % 400) == 0) 
		{
			ret = true;
		}
		else 
		{
			ret = false;
		}
	}
	else 
	{
		ret = false;
	}

	return ret;
}

/******************************************************************************
 * Function명 : gfn_LastDateNum
 * 설명       : 해당월의 마지막 날짜를 숫자로 구하기
 * Params     : sDate : yyyyMMdd형태의 날짜 ( 예 : "20121122" )
 * Return     :
 *              	- 성공 = 마지막 날짜 숫자값 ( 예 : 30 )
 *					- 실패 = -1
 ******************************************************************************/
this.gfn_LastDateNum = function (sDate)
{
	var nMonth,nLastDate;

	if (this.gfn_isNull(sDate)) 
	{
		return -1;
	}

	nMonth = parseInt(sDate.substr(4, 2), 10);
	if (nMonth == 1 || nMonth == 3 || nMonth == 5 || nMonth == 7 || nMonth == 8 || nMonth == 10 || nMonth == 12) 
	{
		nLastDate = 31;
	}
	else if (nMonth == 2) 
	{
		if (this.gfn_IsLeapYear(sDate) == true) 
		{
			nLastDate = 29;
		}
		else 
		{
			nLastDate = 28;
		}
	}
	else 
	{
		nLastDate = 30;
	}

	return nLastDate;
}

/******************************************************************************
 * Function명 : gfn_LastDate
 * 설명       : 해당월의 마지막 날짜를 yyyyMMdd형태로 구하기
 * Params     : sDate : yyyyMMdd형태의 날짜 ( 예 : "20121122" )
 * Return     :
 *              	- 성공 = yyyyMMdd형태의 마지막 날짜 ( 예 : "20121130" )
 *					- 실패 = ""
 ******************************************************************************/
this.gfn_LastDate = function (sDate)
{
	if (this.gfn_isNull(sDate)) 
	{
		return "";
	}

	var nLastDate = this.gfn_LastDateNum(sDate);

	return sDate.substr(0, 6) + nLastDate.toString();
}


/*********************************************************************************************
 * ★ Function명 : gfn_getLastMonth()
 * ★ 설명       : nMonth만큼 날짜 구하는 함수.
 * ★ Params     : 1. sDate -
 2. nMonth -
 * ★ Return     : - 해당날짜를 리턴.
 *********************************************************************************************/
this.gfn_getLastMonth = function (sDate, nMonth)
{
	var d;

	nMonth = parseInt(nMonth, 10);

	if (sDate) 
	{
		var date = this.gfn_str2Date(sDate);
		d = (new Date(date)).addMonth(nMonth);
	}
	else 
	{
		d = (new Date).addMonth(nMonth);
	}

	var s = (new Date(d)).getFullYear();
	var m = (((new Date(d)).getMonth() + 1) + "");
	m = m.length == 1 ? "0" + m : m;

	var dd = (((new Date(d)).getDate()) + "");
	dd = dd.length == 1 ? "0" + dd : dd;

	return (s + m + dd);
}

this.gfn_DateFormatString = function (objDate, strFormat)
{
	if (this.gfn_isNull(strFormat)) 
	{
		return "";
	}
	var fY = String(objDate.getFullYear());
	var fY2 = fY.substr(fY.length-2, 2);

	strFormat = strFormat.toString();
	strFormat = strFormat.split("%Y").join(String(objDate.getFullYear()));
	strFormat = strFormat.split("%y").join(fY2);
	strFormat = strFormat.split("%m").join(String(objDate.getMonth() + 1).padLeft(2, "0"));
	strFormat = strFormat.split("%d").join(String(objDate.getDate()).padLeft(2, "0"));
	strFormat = strFormat.split("%H").join(String(objDate.getHours()).padLeft(2, "0"));
	strFormat = strFormat.split("%M").join(String(objDate.getMinutes()).padLeft(2, "0"));
	strFormat = strFormat.split("%S").join(String(objDate.getSeconds()).padLeft(2, "0"));

	return strFormat;
}

/*********************************************************************************************
 * ★ Function명 : gfn_getFirstDate()
 * ★ 설명       : 현재월 1일 만들기.
 * ★ Params     : 1. sDate -
 * ★ Return     : - 해당날짜를 리턴.
 *********************************************************************************************/
this.gfn_getFirstDate = function (sDate)
{
	var s = "";

	if (sDate == null) 
	{
		s = getToday().substr(0,6) + "01"; 
	}
	else 
	{
		var date = new Date(parseInt(sDate.substr(0, 4), 10), parseInt(sDate.substr(4, 2), 10) - 1, 1);
		s = (new Date(date)).getFullYear()
			 + (((new Date(date)).getMonth() + 1) + "").padLeft(2, '0')
			 + ((new Date(date)).getDate() + "").padLeft(2, '0');
	}
	return (s);
}

/*********************************************************************************************
 * ★ Function명 : gfn_getLastDate()
 * ★ 설명       : 현재월 마지막일 만들기.
 * ★ Params     : 1. sDate -
 * ★ Return     : - 해당날짜를 리턴.
 *********************************************************************************************/
this.gfn_getLastDate = function (sDate)
{
	var s = "";
	if (sDate == null) 
	{
		var date = (new Date()).addMonth(1);
	}
	else 
	{
		var date = new Date(parseInt(sDate.substr(0, 4), 10), parseInt(sDate.substr(4, 2), 10), 1);
	}

	date = (new Date(date)).addDate((new Date(date)).getDate() * -1);

	s = (new Date(date)).getFullYear()
		 + (((new Date(date)).getMonth() + 1) + "").padLeft(2, '0')
		 + ((new Date(date)).getDate() + "").padLeft(2, '0');

	return (s);
}

/*********************************************************************************************
 * ★ Function명 : gfn_getOneMonthAfter()
 * ★ 설명       : 한달후 날짜 구하는 함수.
 * ★ Params     : 1. sDate -
 * ★ Return     : - 해당날짜를 리턴.
 *********************************************************************************************/
this.gfn_getOneMonthAfter = function (sDate)
{
	if (sDate) 
	{
		var date = this.gfn_str2Date(sDate);
		var d = (new Date(date)).addMonth(1);
	}
	else 
	{
		var d = (new Date).addMonth(1);
	}

	var s = (new Date(d)).getFullYear()
		 + (((new Date(d)).getMonth() + 1) + "").padLeft(2, '0')
		 + (((new Date(d)).getDate()) + "").padLeft(2, '0');

	return (s);
}

/*********************************************************************************************
 * ★ Function명 : gfn_getDate()
 * ★ 설명       : 한달후 날짜 구하는 함수.
 * ★ Params     : 1. sDate -
 2. nDiff -
 * ★ Return     : - 해당날짜를 리턴.
 *********************************************************************************************/
this.gfn_getDate = function (sDate, nDiff)
{
	if (sDate) 
	{
		var date = this.gfn_str2Date(sDate);
		var d = (new Date(date)).addDate(nDiff);
	}
	else 
	{
		var d = (new Date).addDate(nDiff);
	}

	var s = (new Date(d)).getFullYear()
		 + (((new Date(d)).getMonth() + 1) + "").padLeft(2, '0')
		 + (((new Date(d)).getDate()) + "").padLeft(2, '0');

	return (s);
}

this.gfn_DateToStr = function (v)
{
	if (typeof (v) == "string") 
	{
		return v;
	}
	return this.gfn_DateFormatString(v, "%Y%m%d%H%M%S");
}

this.gfn_StrToDate = function (v)
{
	if (typeof (v) == "date") 
	{
		return v;
	}
	var d = new Date();
	v = String(v).padRight(14, "0");
	d.setFullYear(parseInt(this.gfn_Left(v, 4), 10), parseInt(v.substr(4, 2), 10) - 1, parseInt(v.substr(6, 2), 10));
	d.setHours(parseInt(v.substr(8, 2), 10), parseInt(v.substr(10, 2), 10), parseInt(v.substr(12, 2), 10));
	return d;
}

/*********************************************************************************************
 * ★ Function명 : gfn_getEpTime
 * ★ 설명       : 총사용시간을 구한다.
 * ★ Params     :  1. sLoginDate - 로그인일시
 2. sLogoutDate - 로그아웃일시
 * ★ Return     : sRetVal 리턴값(총사용시간)
 *********************************************************************************************/
this.gfn_getEpTime = function (sLoginDate, sLogoutDate)
{
	// 총사용시간
	var nSecMilli = 1000;
	var nMinMilli = 1000 * 60;
	var nHrMilli = nMinMilli * 60;
	var nDyMilli = nHrMilli * 24;

	var objLoginDate = new Date(sLoginDate.substr(0, 4), sLoginDate.substr(4, 2), sLoginDate.substr(6, 2),
		sLoginDate.substr(8, 2), sLoginDate.substr(10, 2), sLoginDate.substr(12, 2));
	var objLogoutDate = new Date(sLogoutDate.substr(0, 4), sLogoutDate.substr(4, 2), sLogoutDate.substr(6, 2),
		sLogoutDate.substr(8, 2), sLogoutDate.substr(10, 2), sLogoutDate.substr(12, 2));
	var nDiffDate = objLogoutDate - objLoginDate;

	var nDays = parseInt(nDiffDate / nDyMilli, 10);
	var nHours = parseInt((nDiffDate / nHrMilli) % 24, 10);
	var nMin = parseInt((nDiffDate / nMinMilli) % 60, 10);
	var nSec = parseInt((nDiffDate / nSecMilli) % 60, 10);

	var sRetVal = "";
	if (nDays != 0) 
	{
		sRetVal += nDays + "일 ";
	}
	if (nHours != 0) 
	{
		sRetVal += nHours + "시간 ";
	}
	if (nMin != 0) 
	{
		sRetVal += nMin + "분 ";
	}
	if (nSec != 0) 
	{
		sRetVal += nSec + "초";
	}
	return (sRetVal);
}

this.gfn_GetDateMaskFormat = function (sDate, sMask, sDispSect)
{
	var sRtnVal = "";
	if (sDate.length > 6) 
	{
		if (sDispSect == "1") 
		{
			sRtnVal = sDate.substr(0, 4) + sMask + sDate.substr(4, 2) + sMask + sDate.substr(6, 2);
		}
		else 
		{
			sRtnVal = sDate.substr(0, 4) + sMask + parseInt(sDate.substr(4, 2), 10) + sMask + parseInt(sDate.substr(6, 2), 10);
		}
	}
	else if (sDate.length > 4) 
	{
		if (sDispSect == "1") 
		{
			sRtnVal = sDate.substr(0, 4) + sMask + sDate.substr(4, 2);
		}
		else 
		{
			sRtnVal = sDate.substr(0, 4) + sMask + parseInt(sDate.substr(4, 2), 10);
		}
	}
	return sRtnVal;
}





/**********************************************************************************
 * 함수명      : utlf_GetHolidays
 * 설명        : 양력 nYear에 해당하는 년도의 법정 공휴일(양력) List 모두 구하기
 * argument     : nYear에 ( 년도 )( 예 : 2012 )
 * return Type : Array
 **********************************************************************************/
this.gfn_GetHolidays = function (nYear)
{
	var nYear;
	var aHoliday = new Array();

	if (this.gfn_isNull(nYear)) 
	{
		return aHoliday;
	}

	// ///// 음력 체크
	// 구정
	aHoliday[0] = this.gfn_Lunar2Solar("0" + (nYear - 1) + "1230") + "설날";
	aHoliday[1] = this.gfn_AddDate(aHoliday[0], 1) + "설날";
	aHoliday[2] = this.gfn_AddDate(aHoliday[1], 1) + "설날";
	// 석가탄신일
	aHoliday[3] = this.gfn_Lunar2Solar("0" + nYear + "0408") + "석가탄신일";
	// 추석
	aHoliday[4] = this.gfn_Lunar2Solar("0" + nYear + "0814") + "추석";
	aHoliday[5] = this.gfn_AddDate(aHoliday[4], 1) + "추석";
	aHoliday[6] = this.gfn_AddDate(aHoliday[5], 1) + "추석";

	// ///// 양력 체크
	aHoliday[7] = nYear + "0101" + "신정";
	aHoliday[8] = nYear + "0301" + "삼일절";
	aHoliday[9] = nYear + "0505" + "어린이날";
	aHoliday[10] = nYear + "0606" + "현충일";
	aHoliday[11] = nYear + "0815" + "광복절";
	aHoliday[12] = nYear + "1225" + "성탄절";

	return aHoliday.sort();
}

/**********************************************************************************
 * 함수명      : gfn_Lunar2Solar
 * 설명        : 음력을 양력으로 변환해주는 함수 (처리가능 기간  1841 - 2043년)
 * argument     : sDate ( 날짜 )( 예 : "20121122" )
 * return Type : String
 **********************************************************************************/
this.gfn_Lunar2Solar = function (sDate)
{
	var sMd = "31,0,31,30,31,30,31,31,30,31,30,31";
	var aMd = new Array();
	var aBaseInfo = new Array();

	var nLy,nLm,nLd,sLflag;
	var nSy,nSm,nSd;
	var y1,m1,i,j,y2,y3;
	var leap;

	if (this.gfn_isNull(sDate)) 
	{
		return "";
	}
	if (sDate.length != 9) 
	{
		return "";
	}

	sLflag = sDate.substr(0, 1);
	nLy = parseInt(sDate.substr(1, 4), 10);
	nLm = parseInt(sDate.substr(5, 2), 10);
	nLd = parseInt(sDate.substr(7, 2), 10);
	if (nLy < 1841 || nLy > 2043) 
	{
		return "";
	}
	if (sLflag != "0" && sLflag != "1") 
	{
		return "";
	}

	aBaseInfo = this.gfn_SolarBase();
	aMd = sMd.split(",");
	if (this.gfn_IsLeapYear(sDate.substr(1, 8)) == true) 
	{
		aMd[1] = 29;
	}
	else 
	{
		aMd[1] = 28;
	}

	y1 = nLy - 1841;
	m1 = nLm - 1;
	leap = 0;
	if (parseInt(aBaseInfo[y1 * 12 + m1], 10) > 2) 
	{
		leap = this.IsLeayYear(nLy + "0101");
	}
	var mm;
	if (leap == 1) 
	{
		switch (parseInt(aBaseInfo[y1 * 12 + m1], 10)) 
		{
			case 3:
				mm = 29;
				break;
			case 4:
				mm = 30;
				break;
			case 5:
				mm = 29;
				break;
			case 6:
				mm = 30;
				break;
		}
	}
	else 
	{
		switch (parseInt(aBaseInfo[y1 * 12 + m1], 10)) 
		{
			case 1:
				mm = 29;
				break;
			case 2:
				mm = 30;
				break;
			case 3:
				mm = 29;
				break;
			case 4:
				mm = 29;
				break;
			case 5:
				mm = 30;
				break;
			case 6:
				mm = 30;
				break;
		}
	}
	var td;
	td = 0;
	for (i = 0; i <= y1 - 1; i++) 
	{
		for (j = 0; j <= 11; j++) 
		{
			switch (parseInt(aBaseInfo[i * 12 + j], 10)) 
			{
				case 1:
					td = td + 29;
					break;
				case 2:
					td = td + 30;
					break;
				case 3:
					td = td + 58;
					break;
				case 4:
					td = td + 59;
					break;
				case 5:
					td = td + 59;
					break;
				case 6:
					td = td + 60;
					break;
			}
		}
	}

	for (j = 0; j <= m1 - 1; j++) 
	{
		switch (parseInt(aBaseInfo[y1 * 12 + j], 10)) 
		{
			case 1:
				td = td + 29;
				break;
			case 2:
				td = td + 30;
				break;
			case 3:
				td = td + 58;
				break;
			case 4:
				td = td + 58;
				break;
			case 5:
				td = td + 59;
				break;
			case 6:
				td = td + 60;
				break;
		}
	}

	if (leap == 1) 
	{
		switch (parseInt(aBaseInfo[y1 * 12 + m1], 10)) 
		{
			case 3:
				mm = 29;
				break;
			case 4:
				mm = 29;
				break;
			case 5:
				mm = 30;
				break;
			case 6:
				mm = 30;
				break;
		}
	}

	td = td + nLd + 22;

	if (sLflag == "1") 
	{
		switch (parseInt(aBaseInfo[y1 * 12 + m1], 10)) 
		{
			case 3:
				td = td + 29;
				break;
			case 4:
				td = td + 30;
				break;
			case 5:
				td = td + 29;
				break;
			case 6:
				td = td + 30;
				break;
		}
	}

	y1 = 1840;
	do {
		y1 = y1 + 1;
		leap = this.gfn_IsLeapYear(y1 + "0101");

		if (leap == 1) 
		{
			y2 = 366;
		}
		else 
		{
			y2 = 365;
		}

		if (td <= y2) 
		{
			break;
		}

		td = td - y2;
	} while (1);

	nSy = y1;
	aMd[1] = y2 - 337;
	m1 = 0;
	do {
		m1 = m1 + 1;
		if (td <= parseInt(aMd[m1 - 1], 10)) 
		{
			break;
		}
		td = td - parseInt(aMd[m1 - 1], 10);
	} while (1);

	nSm = m1;
	nSd = td;
	y3 = nSy;
	td = y3 * 365 + parseInt(y3 / 4, 10) - parseInt(y3 / 100, 10) + parseInt(y3 / 400, 10);
	for (i = 0; i <= nSm - 1; i++) 
	{
		td = td + parseInt(aMd[i], 10);
	}

	td = td + nSd;
	return y3 + this.gfn_Right("0" + nSm, 2) + this.gfn_Right("0" + nSd, 2);
}

/**********************************************************************************
 * 함수명      : gfn_SolarBase
 * 설명        : 각 월별 음력 기준 정보를 처리하는 함수(처리가능 기간  1841 - 2043년)
 단, 내부에서 사용하는 함수임
 * argument     :
 * return Type : Array
 **********************************************************************************/
this.gfn_SolarBase = function ()
{
	var kk;

	// 1841
	kk = "1,2,4,1,1,2,1,2,1,2,2,1,";
	kk += "2,2,1,2,1,1,2,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,4,1,2,1,2,1,";
	kk += "2,2,1,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,5,2,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,3,2,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,2,1,2,";
	// 1851
	kk += "2,2,1,2,1,1,2,1,2,1,5,2,";
	kk += "2,1,2,2,1,1,2,1,2,1,1,2,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,5,2,1,2,1,2,";
	kk += "1,1,2,1,2,2,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,5,2,1,2,1,2,2,2,";
	kk += "1,2,1,1,2,1,1,2,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,1,2,2,";
	kk += "2,1,6,1,1,2,1,1,2,1,2,2,";
	// 1861
	kk += "1,2,2,1,2,1,2,1,2,1,1,2,";
	kk += "2,1,2,1,2,2,1,2,2,3,1,2,";
	kk += "1,2,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,4,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,1,1,2,2,1,2,2,2,";
	kk += "1,2,1,1,2,1,1,2,1,2,2,2,";
	kk += "1,2,2,3,2,1,1,2,1,2,2,1,";
	kk += "2,2,2,1,1,2,1,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,2,1,1,5,2,1,";
	// 1871
	kk += "2,2,1,2,2,1,2,1,2,1,1,2,";
	kk += "1,2,1,2,2,1,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,4,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,1,2,1,1,2,1,2,2,2,1,";
	kk += "2,2,1,1,5,1,2,1,2,2,1,2,";
	kk += "2,2,1,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,1,2,1,2,1,";
	kk += "2,2,4,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,2,1,2,1,1,2,";
	// 1881
	kk += "1,2,1,2,1,2,5,2,2,1,2,1,";
	kk += "1,2,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,2,1,2,";
	kk += "2,1,1,2,3,2,1,2,2,1,2,2,";
	kk += "2,1,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,5,2,1,1,2,1,2,1,2,";
	kk += "2,1,2,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,5,2,1,2,2,1,2,1,2,1,2,";
	// 1891
	kk += "1,2,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,5,2,2,1,2,2,2,";
	kk += "1,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,5,1,2,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,1,2,1,2,1,2,1,2,1,";
	kk += "2,1,5,2,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,2,1,1,2,1,2,5,2,2,1,2,";
	// 1901
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,3,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,2,1,";
	kk += "2,2,1,2,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,4,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,2,1,2,1,2,2,1,2,";
	kk += "1,5,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	// 1911
	kk += "2,1,2,1,1,5,1,2,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,1,2,";
	kk += "2,2,1,2,5,1,2,1,2,1,1,2,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,3,2,1,2,2,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,5,2,2,1,2,2,";
	kk += "1,2,1,1,2,1,1,2,2,1,2,2,";
	// 1921
	kk += "2,1,2,1,1,2,1,1,2,1,2,2,";
	kk += "2,1,2,2,3,2,1,1,2,1,2,2,";
	kk += "1,2,2,1,2,1,2,1,2,1,1,2,";
	kk += "2,1,2,1,2,2,1,2,1,2,1,1,";
	kk += "2,1,2,5,2,1,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,5,1,2,1,1,2,2,1,2,2,2,";
	kk += "1,2,1,1,2,1,1,2,1,2,2,2,";
	kk += "1,2,2,1,1,5,1,2,1,2,2,1,";
	// 1931
	kk += "2,2,2,1,1,2,1,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,2,1,1,2,1,2,";
	kk += "1,2,2,1,6,1,2,1,2,1,1,2,";
	kk += "1,2,1,2,2,1,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,4,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,1,2,1,1,2,1,2,2,2,1,";
	kk += "2,2,1,1,2,1,4,1,2,2,1,2,";
	kk += "2,2,1,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,1,2,1,2,1,";
	// 1941
	kk += "2,2,1,2,2,4,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,2,1,2,1,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,1,2,4,1,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,2,1,2,";
	kk += "2,1,1,2,1,1,2,1,2,2,1,2,";
	kk += "2,5,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,3,2,1,2,1,2,";
	kk += "2,1,2,2,1,2,1,1,2,1,2,1,";
	// 1951
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,4,2,1,2,1,2,1,2,";
	kk += "1,2,1,1,2,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,1,2,2,";
	kk += "2,1,4,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,5,2,1,2,2,";
	kk += "1,2,2,1,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,1,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,2,5,2,1,2,1,2,1,";
	// 1961
	kk += "2,1,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,2,1,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,2,3,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,1,2,2,1,";
	kk += "2,2,5,2,1,1,2,1,1,2,2,1,";
	kk += "2,2,1,2,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,1,2,1,5,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,2,1,2,1,2,2,1,2,";
	// 1971
	kk += "1,2,1,1,5,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,1,2,2,2,1,";
	kk += "2,2,1,5,1,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,5,2,1,1,2,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,1,";
	kk += "2,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,1,6,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,1,2,2,";
	// 1981
	kk += "1,2,1,1,2,1,1,2,2,1,2,2,";
	kk += "2,1,2,3,2,1,1,2,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,1,2,2,";
	kk += "2,1,2,2,1,1,2,1,1,5,2,2,";
	kk += "1,2,2,1,2,1,2,1,1,2,1,2,";
	kk += "1,2,2,1,2,2,1,2,1,2,1,1,";
	kk += "2,1,2,2,1,5,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,2,1,1,5,1,2,1,2,2,2,2,";
	// 1991
	kk += "1,2,1,1,2,1,1,2,1,2,2,2,";
	kk += "1,2,2,1,1,2,1,1,2,1,2,2,";
	kk += "1,2,5,2,1,2,1,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,2,1,1,2,1,2,";
	kk += "1,2,2,1,2,2,1,5,2,1,1,2,";
	kk += "1,2,1,2,2,1,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,3,2,2,1,2,2,2,1,";
	kk += "2,1,1,2,1,1,2,1,2,2,2,1,";
	kk += "2,2,1,1,2,1,1,2,1,2,2,1,";
	// 2001
	kk += "2,2,2,3,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,1,2,1,2,1,";
	kk += "2,2,1,2,2,1,2,1,1,2,1,2,";
	kk += "1,5,2,2,1,2,1,2,2,1,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,1,5,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,2,1,2,";
	kk += "2,1,1,2,1,1,2,1,2,2,1,2,";
	kk += "2,2,1,1,5,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	// 2011
	kk += "2,1,2,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,6,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,1,2,5,2,1,2,";
	kk += "1,2,1,1,2,1,2,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,1,2,2,";
	kk += "2,1,1,2,3,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	kk += "2,1,2,5,2,1,1,2,1,2,1,2,";
	// 2021
	kk += "1,2,2,1,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,2,2,1,2,1,2,1,2,";
	kk += "1,5,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,2,1,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,2,1,1,5,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,1,2,2,2,";
	kk += "1,2,2,1,5,1,2,1,1,2,2,1,";
	kk += "2,2,1,2,2,1,1,2,1,1,2,2,";
	kk += "1,2,1,2,2,1,2,1,2,1,2,1,";
	// 2031
	kk += "2,1,5,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,2,1,1,2,1,5,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,4,1,1,2,1,2,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,2,1,1,2,1,";
	kk += "2,2,1,2,5,2,1,2,1,2,1,1,";
	kk += "2,1,2,2,1,2,2,1,2,1,2,1,";
	// 2041
	kk += "2,1,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,5,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,1,2,2,1,2,2";

	var arr = new Array();
	arr = kk.split(",");

	return arr;
}

/*******************************************************************************
 * 기      능   : 월요일의 일자 또는 월요일로부터 argIdx 일의 후의 일자를 argFormat 형태로 반환하는 함수.
 * 설      명   : argIdx : 월요일부터 +되는 일자
 argFormat : 출력하는 날짜의 포멧
 ********************************************************************************/
this.gfn_getFirstDate = function (argIdx, argFormat)
{
	var objDate = new Date();
	objDate.addDate(-objDate.getDay() + 1);
	if (argIdx == "") 
	{
		//return objDate.toFormatString(argFormat);
	}
	else 
	{
		objDate.addDate(argIdx);
		//return objDate.toFormatString(argFormat);
	}
	trace("------");
	return this.gfn_DateFormatString(objDate, argFormat); 
}]]></Script>
