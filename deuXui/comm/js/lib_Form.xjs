<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript5.0"><![CDATA[/*
 ===============================================================================
 == 폼과 관련된 공통함수들은 여기에 작성한다.
 ===============================================================================
 ● gfn_FormOnLoad      : Form Load 시 공통 기능 처리
 ● gfn_FormSetInit     : Form에 속한 컨트롤들의 초기화 처리
 ● gfn_AllCallFunction : Form에 속한 모든 컴포넌트를 함수의 인자로 넘겨주고 함수 호출처리
 ● gfn_setTitle        : 컨트롤의 title을 공통 영역에 정의한 MsgId를 바탕으로 변경시키는 함수
 ● gfn_setAuth         : 컨트롤의 기능들에 대한 권한을 설정한다.
 ● gfn_setEnableCtrl   : 화면안의 컨트롤을 활성화 또는 비활성화 처리
 ● gfn_setDefault      : 화면안의 컨트롤의 default 속성을 설정한다.
 ● gfn_Alert           : 메세지 코드에 따른 실제 메세지값을 찾은 후 팝업창을 생성해서 해당 값을 보여주는 함수
 ● gfn_Confirm         : 메세지 코드에 따른 실제 메세지값을 찾은 후 팝업창을 생성해서 해당 값을 보여주는 함수
 ● gfn_Dialog          : Modal Dialog실행 함수
 ● gfn_Open            : Modaless Dialog실행 함수
 ● gfn_NewChildFrame   : 신규 ChildFrame 생성
 */
 
/************************
 *  공통 Script Include
 ************************/
include "Lib::lib_Service.xjs"
include "Lib::lib_Grid.xjs"
include "Lib::lib_String.xjs"
include "Lib::lib_Util.xjs"
include "Lib::lib_Data.xjs"

/*******************************************************************************
 * Function Name: gfn_FormOnLoad
 * Description	: Form Load 시 공통 기능 처리
 * Arguments	: obj :열린 화면 객체
 * Return 		: None
 ********************************************************************************/
this.gfn_FormOnLoad = function (obj)
{
	// 팝업화면의 경우 parent의 menu_id를 참조할 수 있도록 처리한다.
// 	try 
// 	{
// 		
// 		if (this.gfn_isNull(pv_menuId) && !this.gfn_isNull(this.getOwnerFrame().arguments[application.gv_MenuIdCol])) 
// 		{
// 			this.lookupSetter("pv_menuId", "set_pv_menuId").set(this.getOwnerFrame().arguments[application.gv_MenuIdCol]);
// 		}
// 	}
// 	catch (e) 
// 	{
// 	}

	// Form에 속한 컨트롤들의 초기화 처리

	this.gfn_AllCallFunction(obj, this.gfn_FormSetInit, true);
}

/*******************************************************************************
 * Function Name: gfn_FormSetInit
 * Description	: Form에 속한 컨트롤들의 초기화 처리
 * Arguments	: obj :객체
 * Return 		: None
 ********************************************************************************/
this.gfn_FormSetInit = function (obj)
{
	
	this.gfn_setTitle(obj);

	this.gfn_setDefault(obj);

	//this.gfn_setFlag(obj);
}

/********************************************************************************
 * Function Name: gfn_getComponentValue
 * Description	: 프로그램의 특정 컴포넌트의 Attribute값을 찾는 함수
 *				  (ex) gfn_getComponentValue("stInputBox", "value")
 * Arguments	: strID(Component의 ID값), strAttributeNM(Attribute Name)
 * Return 		: Attribute	값
 ********************************************************************************/
this.gfn_getComponentValue = function (objId, sProp)
{
	var idObj = this.gfn_getComponent(objId);
	if (this.gfn_isNull(idObj)) 
	{
		return "";
	}
	return idObj[sProp];
}

/********************************************************************************
 * Function Name: gfn_getComponent
 * Description	: 프로그램의 특정 컴포넌트를 컴포넌트의 id값을
 * 				  이용하여 찾아내는 함수
 * Arguments	: componentId(Component의 ID값), obj:찾기시작할 container
 * Return 		: Component Object
 ********************************************************************************/
this.gfn_getComponent = function (objId, obj)
{
	if (this.gfn_isNull(obj)) 
	{
		obj = this;
	}
	return this.gfn_AllCallFunction(obj, this.gfn_isComponent, true, objId);
}

/********************************************************************************
 * Function Name: gfn_isComponent
 * Description	: 프로그램의 특정 컴포넌트를 컴포넌트의 id값을
 * 				  이용하여 찾아내는 함수
 * Arguments	: obj:컴포넌트 container, id: component Id
 * Return 		: Component Object
 ********************************************************************************/
this.gfn_isComponent = function (Obj, id)
{
	if (Obj.name == id) 
	{
		return Obj;
	}
}

/*******************************************************************************
 * Function Name: gfn_AllCallFunction
 * Description	: Form에 속한 모든 컴포넌트를 함수의 인자로 넘겨주고 함수 호출처리
 * Arguments	: obj :컨테이너(Form, Div), FunctionObj: 호출함수, bObjects: Invisible object 포함여부, paramObj: 함수에 넘겨줄 파라메터
 * Return 		: retVal
 ********************************************************************************/
this.gfn_AllCallFunction = function (obj, FunctionObj, bObjects, paramObj)
{
	var strType;
	var retVal;

	for (var i = 0; i < obj.components.length; i++) 
	{
		strType = obj.components[i].toString().toUpperCase();

		retVal = FunctionObj.call(this, obj.components[i], paramObj);
		 
		if (this.gfn_isNull(retVal) == false) 
		{
			return retVal;
		}

		if (obj.components[i].components) 
		{
			switch (strType) 
			{
				case "[OBJECT TAB]":
					retVal = this.gfn_AllCallFunction(obj.components[i], FunctionObj, bObjects, paramObj);
					if (this.gfn_isNull(retVal) == false) 
					{
						return retVal;
					}
					break;
				case "[OBJECT TABPAGE]":
				case "[OBJECT DIV]":
				case "[OBJECT POPUPDIV]":
					if (this.gfn_isNull(obj.components[i].url) == true) 
					{
						retVal = this.gfn_AllCallFunction(obj.components[i], FunctionObj, bObjects, paramObj);
						if (this.gfn_isNull(retVal) == false) 
						{
							return retVal;
						}
					}
					break;
			}
		}
	}

	if (bObjects == true && obj.objects) 
	{
		for (var i = 0; i < obj.objects.length; i++) 
		{
			retVal = FunctionObj.call(this, obj.objects[i], paramObj);
			if (this.gfn_isNull(retVal) == false) 
			{
				return retVal;
			}
		}
	}
}

/********************************************************************************
 * Function Name	: gfn_setTitle
 * Description		: 컨트롤의 title을 공통 영역에 정의한 Domain을 바탕으로 변경시키는 함수
 * Arguments		: obj:컨트롤
 * Return 			:
 ********************************************************************************/
this.gfn_setTitle = function (obj)
{
	var sText;
	var sCode;

	var strType = obj.toString().toUpperCase();

	switch (strType) 
	{
		case "[OBJECT GRID]":
			for (var i = 0; i < obj.getCellCount("head"); i++) 
			{
				var sCode = obj.getCellProperty('head', i, "text");
				var sText = this.gfn_getDomainText(sCode);
				if (sCode != sText) 
				{
					obj.setCellProperty("head", i, "text", sText);
				}
			}
			break;
		case "[OBJECT DATASET]":
			for (var i = 0; i < obj.getRowCount(); i++) 
			{
				for (var nCol = 0; nCol < obj.getColCount(); nCol++) 
				{
					sCode = obj.getColumn(i, nCol);
					sText = this.gfn_getDomainText(sCode);
					if (sCode != sText) 
					{
						obj.setColumn(i, nCol, sText);
					}
				}
			}
			break;
		case "[OBJECT COMBO]":
		case "[OBJECT RADIO]":
		case "[OBJECT LISTBOX]":
			
			if (this.gfn_isNull(obj.innerdataset)) 
			{
				break;
			}
			if (obj.innerdataset.toString().toUpperCase() != "[OBJECT DATASET]") 
			{
				break;
			}
			for (var i = 0; i < obj.innerdataset.getRowCount(); i++) 
			{
				sCode = obj.innerdataset.getColumn(i, obj.datacolumn);
				
				sText = this.gfn_getDomainText(sCode);
				
				if (sCode != sText) 
				{
					obj.innerdataset.setColumn(i, obj.datacolumn, sText);
					if(obj.index == 0 ){
						obj.set_index(-1);
						obj.set_index(0);
					}
				}
			}
			break;
		case "[OBJECT EDIT]":
		case "[OBJECT MASKEDIT]":
		case "[OBJECT CALENDAR]":
		case "[OBJECT TEXTAREA]":
			sText = this.gfn_getDomainText(obj.value);
			if (sText != obj.value) 
			{
				obj.set_value(sText);
			}
			break;
		case "[OBJECT FILEUPLOAD]":
			sText = this.gfn_getDomainText(obj.style.buttontext);
			if (sText != obj.style.buttontext) 
			{
				obj.style.set_buttontext(sText);
			}
			break;
		default:
			//alert("192 " + obj.text);
			sText = this.gfn_getDomainText(obj.text);
			// alert("194 " + sText);
			if (sText != obj.text) 
			{
				obj.set_text(sText);
			}
			break;
	}
}

/**********************************************************************************
 * Function Name   : gfn_setFlag
 * Description     : 각 컴포넌트의 Flag설정에 따른 처리
 * Arguments       : obj: 컨트롤 객체
 * Return          :
 **********************************************************************************/
this.gfn_setFlag = function (obj)
{
	if (this.gfn_isNull(obj[application.gv_FlagProp])) 
	{
		return;
	}

	var arrEnv = this.gfn_Split2(obj[application.gv_FlagProp], ";", ":");
	var strType = obj.toString().toUpperCase();
	var eInit = [];

	if (this.gfn_isNull(arrEnv)) 
	{
		return;
	}

	if (strType == "[OBJECT DIV]") 
	{
		obj.set_text(obj[application.gv_FlagProp]);
	}

	for (var i = 0; i < arrEnv.length; i++) 
	{
		switch (arrEnv[i][0]) 
		{
			case application.gv_ActionFlag:
				this.gfn_setAuth(obj, arrEnv[i][1]);
				break;
			case application.gv_ResizeFlag:
				try 
				{
					this.addEventHandler("onsize", this.gfn_frm_OnSize, this);
					this.gfn_setOrgSize(obj, arrEnv[i][1]);
					eInit["cx"] = this.getOffsetWidth();
					eInit["cy"] = this.getOffsetHeight();
					this.gfn_setResize(obj, eInit);
				}
				catch (e) 
				{
					return false;
				}
				break;
			default:
				break;
		}
	}
}

/**********************************************************************************
 * Function Name   : gfn_setAuth
 * Description     : 컨트롤의 기능들에 대한 권한을 설정한다.
 * Arguments       : obj: 컨트롤 객체, sVal: 권한을 설정값
 * Return          :
 **********************************************************************************/
this.gfn_setAuth = function (obj, sVal)
{
	
	if( this.parent == "[object ChildFrame]" ){
		var strRole = this.gfn_getMenuInfo(this.gfn_getMenuId(), "MENU_AUTH");
	} else {	
		var strRole = this.parent.gfn_getMenuInfo(this.parent.gfn_getMenuId(), "MENU_AUTH");
	}
	
	if (this.gfn_isNull(strRole)) 
	{
		return;
	}

	// strRole = "1001";

	switch (sVal) 
	{
		case application.gv_insertAct:
			// 데이터 추가
			if (strRole.substr(0, 1) != "1") 
			{
				this.gfn_setEnableCtrl(obj, false);
			}
			break;
		case application.gv_updateAct:
			// 데이터 수정
			if (strRole.substr(1, 1) != "1") 
			{
				this.gfn_setEnableCtrl(obj, false);
			}
			break;
		case application.gv_deleteAct:
			// 데이터 삭제
			if (strRole.substr(2, 1) != "1") 
			{
				this.gfn_setEnableCtrl(obj, false);
			}
			break;
		case application.gv_commitAct:
			// 데이터 저장 (서버에 저장처리)
			if ((strRole.substr(0, 1) != "1") && 
				(strRole.substr(1, 1) != "1") && 
				(strRole.substr(2, 1) != "1")) 
			{
				this.gfn_setEnableCtrl(obj, false);
			}
			break;
		case application.gv_outputAct:
			// 데이터 프린트 또는 PC(파일)로 저장
			if (strRole.substr(3, 1) != "1") 
			{
				this.gfn_setEnableCtrl(obj, false);
			}
			break;
		default:
			break;
	}
}

/**********************************************************************************
 * Function Name   : gfn_setDefault
 * Description     : 화면안의 컨트롤의 default 속성을 설정한다.
 * Arguments       : obj: 컨트롤 객체
 * Return          :
 **********************************************************************************/
this.gfn_setDefault = function (obj)
{
	var strType = obj.toString().toUpperCase();

	switch (strType) 
	{
		case "[OBJECT GRID]":
			if (obj.autofittype == "none") 
			{
				obj.set_cellsizingtype("col");
			}
			obj.set_autoenter("select");
			for (var nCell = 0; nCell < obj.getCellCount("Body"); nCell++) 
			{
				obj.setCellProperty("Body", nCell, "editautoselect", true);
				obj.setCellProperty("Body", nCell, "combodisplayrowcount", 10);
			}
			break;
		case "[OBJECT COMBO]":
			if (obj.displayrowcount == -1) 
			{
				obj.set_displayrowcount(10);
			}
		case "[OBJECT EDIT]":
		case "[OBJECT MASKEDIT]":
		case "[OBJECT TEXTAREA]":
			obj.set_autoselect(true);
			break;
		default:
			break;
	}
}

/**********************************************************************************
 * Function Name   : gfn_setEnableCtrl
 * Description     : 화면안의 컨트롤을 활성화 또는 비활성화 처리
 * Arguments       : obj: 컨트롤 객체, bEnable: 활성화 여부
 * Return          :
 **********************************************************************************/
this.gfn_setEnableCtrl = function (obj, bEnable)
{
	var strType = obj.toString().toUpperCase();

	switch (strType) 
	{
		case "[OBJECT TAB]":
		case "[OBJECT DIV]":
		case "[OBJECT ACTIVEX]":
			obj.set_enable(bEnable);
			break;
		case "[OBJECT TABPAGE]":
			obj.Parent.removeChild(obj.name);
			break;
		case "[OBJECT GRID]":
		case "[OBJECT LISTBOX]":
			obj.set_readonly(!(bEnable));
			obj.set_enableevent(bEnable);
			break;
		case "[OBJECT EDIT]":
		case "[OBJECT CALENDAR]":
		case "[OBJECT MASKEDIT]":
		case "[OBJECT TEXTAREA]":
			obj.set_readonly(!(bEnable));
			break;
		default:
			obj.set_enable(bEnable);
			obj.set_enableevent(bEnable);
			break;
	}
}

/********************************************************************************
 * Function Name: gfn_Alert
 * Description	: 메세지 코드에 따른 실제 메세지값을 찾은 후 팝업창을
 *				  생성해서 해당 값을 보여주는 함수
 * Arguments	: strMsgId(MessageId)
 *				  strMsgType(메세지 종류 : ERR, WARN, INFO)
 *				  msgArr[](메세지값으로 치환될 Parameter Array)
 * Return 		: 팝업에 해당 메세지값을 표현
 ********************************************************************************/
this.gfn_Alert = function (strMsgId, strMsgType, msgArr)
{
	// strMsgType : "default", "error", "question", "warning", "information" (default)

	if (this.gfn_isNull(strMsgType)) 
	{
		strMsgType = "information";
	}

	var strMsg = this.gfn_getDomainText(strMsgId, msgArr);

	this.alert(strMsg, application.gv_MsgTitle, strMsgType);

	return;
}

/********************************************************************************
 * Function Name: gfn_Confirm
 * Description	: 메세지 코드에 따른 실제 메세지값을 찾은 후 팝업창을
 *				  생성해서 해당 값을 보여주는 함수
 * Arguments	: strMsgId(MessageId)
 *				  strMsgType(메세지 종류 : ERR, WARN, INFO)
 *				  msgArr[](메세지값으로 치환될 Parameter Array)
 * Return 		: 팝업에 해당 메세지값을 표현
 ********************************************************************************/
this.gfn_Confirm = function (strMsgId, strMsgType, msgArr)
{
	// strMsgType : "default", "error", "question", "warning", "information" (default)
	if (this.gfn_isNull(strMsgType)) 
	{
		strMsgType = "question";
	}

	var strMsg = this.gfn_getDomainText(strMsgId, msgArr);

	return this.confirm(strMsg, application.gv_MsgTitle, strMsgType);
}

/**********************************************************************************
 * Function Name: gfn_Dialog
 * Description  : Modal Dialog실행 함수
 * Arguments    : sID		( Popup Form의 ID )
 *				: sURL 		( Popup Form  URL )
 *				: sArg 		( Popup Form으로 전달될 Argument )
 *				: nLeft 	( Popup Form Left Position )
 *				: nTop 		( Popup Form Top Position )
 *				: nWidth 	( Popup Form Width )
 *				: nHeight	( Popup Form Height )
 *				: sStyle 	( Popup Form 기본 유형 )
 *				: sProp 	( Chile Frame의 모든 Property를 설정 )
 * Return       : String ( Dialog창에서 close()에 의해 Return된 값 )
 **********************************************************************************/
this.gfn_Dialog = function (sID, sURL, sArg, nLeft, nTop, nWidth, nHeight, sStyle, sProp, callback)
{


	var rtn;
	var newChild;
	var MyFrame = this.getOwnerFrame();
	
	sID = this.gfn_getDomainText(sID).replace(/\./g, "_");

	newChild = this.gfn_NewChildFrame(sID, sURL, sArg, nLeft, nTop, nWidth, nHeight, sStyle, sProp);
	
	newChild.showModalAsync(sID, MyFrame, sArg, this, callback);

}
/**********************************************************************************
 * Function Name: gfn_Open
 * Description  : Modaless Dialog실행 함수
 * Arguments    : sID		( Popup Form의 ID )
 *				: sURL 		( Popup Form  URL )
 *				: sArg 		( Popup Form으로 전달될 Argument )
 *				: nLeft 	( Popup Form Left Position )
 *				: nTop 		( Popup Form Top Position )
 *				: nWidth 	( Popup Form Width )
 *				: nHeight	( Popup Form Height )
 *				: sStyle 	( Popup Form 기본 유형 )
 *				: sProp 	( Chile Frame의 모든 Property를 설정 )
 * Return       : Boolean
 **********************************************************************************/
this.gfn_Open = function (sID, sURL, sArg, nLeft, nTop, nWidth, nHeight, sStyle, sProp)
{
	var rtn;
	var newChild;
	var MyFrame = this.getOwnerFrame();

	sID = this.gfn_getDomainText(sID);

	newChild = this.gfn_NewChildFrame(sID, sURL, sArg, nLeft, nTop, nWidth, nHeight, sStyle, sProp);

	return newChild.showModeless(sID, MyFrame, sArg);
}

/**********************************************************************************
 * Function Name: gfn_NewChildFrame
 * Description  : 신규 ChildFrame 생성
 * Arguments    : sID		( Popup Form의 ID )
 *				: sURL 		( Popup Form  URL )
 *				: sArg 		( Popup Form으로 전달될 Argument )
 *				: nLeft 	( Popup Form Left Position )
 *				: nTop 		( Popup Form Top Position )
 *				: nWidth 	( Popup Form Width )
 *				: nHeight	( Popup Form Height )
 *				: sStyle 	( Popup Form 기본 유형 )
 *				: sProp 	( Chile Frame의 모든 Property를 설정 )
 * Return       : ChildFrame 객체
 **********************************************************************************/
this.gfn_NewChildFrame = function (sID, sURL, sArg, nLeft, nTop, nWidth, nHeight, sStyle, sProp)
{
	var newChild;

	newChild = new ChildFrame;
	newChild.init(sID, "absolute", nLeft, nTop, nWidth, nHeight, null, null,  sURL);
	// newChild.autosize = true;
	//newChild.set_showtitlebar(true);
	
	newChild.set_titletext(this.gfn_getDomainText(sID));


	if (this.gfn_isNull(sStyle) == false) 
	{
		var aStyle = this.gfn_Split2(sStyle, ",", "=");
		for (i = 0; i < aStyle.length; i++) 
		{
			newChild.style[aStyle[i][0]] = aStyle[i][1];
		}
	}

	if (this.gfn_isNull(sProp) == false) 
	{
		var aProp = this.gfn_Split2(sProp, ",", "=");
		for (var i = 0; i < aProp.length; i++) 
		{
			newChild[aProp[i][0]] = aProp[i][1];
		}
	}
if(this.parent.url != null)
{
	newChild.arguments = [];
	newChild.arguments[application.gv_MenuIdCol] = this.parent.gfn_getMenuId();
}

	return newChild;
}

/**********************************************************************************
 * Function Name: gfn_DsGetUpdated
 * Description  : Datset의 갱신여부를  Return 한다.
 * Arguments    : objDs	확인 대상 Dataset
 * Return       : boolean
 **********************************************************************************/
this.gfn_DsGetUpdated = function (objDs)
{
	this.gfn_updateToDataset();
	return this.gfn_DsIsUpdated(objDs);
}

/**********************************************************************************
 * Function Name: gfn_updateToDataset
 * Description  : 컨트롤이 Dataset에 bind되어 있을경우 즉시 value를 Dataset에 적용시킨다.
 * Arguments    :
 * Return       :
 **********************************************************************************/
this.gfn_updateToDataset = function ()
{
	var objComp = this.getFocus();
	
	if (objComp != null) 
	{
		try 
		{
			objComp.updateToDataset();
		}
		catch (e) 
		{
		}
	}
}

/********************************************************************************
 * Function Name	: gfn_DsCheckValid
 * Description   	: DataSet 내의 데이터 무결성을 검사하는 함수
 * Parameter		: objDs(DataSet)
 * Return 			:
 ********************************************************************************/
this.gfn_DsCheckValid = function (objDs)
{
	var objDsValid = this.objects[objDs.name + "Valid"];

	if (this.gfn_isNull(objDsValid)) 
	{
		return true;
	}

	var nRowCnt = objDs.getRowCount();
	var nColCnt = objDs.getColCount();

	for (var i = 0; i < nRowCnt; i++) 
	{
		for (var j = 0; j < nColCnt; j++) 
		{
			if (objDs.getRowType(i) == 2 || objDs.getRowType(i) == 4) 
			{
				var rtnVar = this.gfn_ItemCheck(i, j, objDs, objDsValid);
				if (!rtnVar) 
				{
					return false;
				}
			}
		}
	}
	return true;
}

/********************************************************************************
 * Function Name	: gfn_ItemCheck
 * Description		: DataSet 내의 데이터 무결성을 검사하는 함수
 * Parameter		: rowNum = DataSet row position
 *					  colNum = DataSet Column Index
 *					  objGrd = DataSet(Grid에 bind된 DataSet)
 *					  objDsValid = Dataset(objGrd의 무결성 검사용 DataSet
 * Return 			: true = Data에 문제 없음
 *					  false = 무결성 위한
 ********************************************************************************/
this.gfn_ItemCheck = function (rowNum, colNum, objGrd, objDsValid)
{
	var arrItem = new Array();
	var strColNm = objGrd.getColID(colNum);

	if (objDsValid.getColumnInfo(strColNm) == null) 
	{
		return true;
	}

	var strCol = objDsValid.getColumn(0, strColNm);
	if (this.gfn_isNull(strCol)) 
	{
		return true;
	}

	arrItem = strCol.split(",");
	var value = objGrd.getColumn(rowNum, colNum);

	var returnVal;
	var title = "";


	for (var k = 0; k < arrItem.length; k++) 
	{
		var arrItem2 = new Array();

		arrItem2 = arrItem[k].split(":");
		switch (arrItem2[0]) 
		{
			case "title":
				title = this.gfn_getDomainText("domain." + arrItem2[1]);
				break;
			case "required":
				if (arrItem2[1] == "true") 
				{
					if (this.gfn_isNull(value)) 
					{
						this.gfn_Alert("msg.err.validator.required", "warning", title);
						return false;
					}
				}
				break;
			case "minlength":
				if (this.gfn_Length(value) < arrItem2[1]) 
				{
					this.gfn_Alert("msg.err.validator.minlength", "warning", title, arrItem2[1]);
					return false;
				}
				break;
			case "maxlength":
				if (this.gfn_Length(value) > arrItem2[1]) 
				{
					this.gfn_Alert("msg.err.validator.maxlength", "warning", title, arrItem2[1]);
					return false;
				}
				break;
			case "num":
				if (arrItem2[1] == "f" && !TOBE.isNumeric(value)) 
				{
					this.gfn_Alert("msg.err.validator.chknumber.f", "warning", title, arrItem2[1]);
					return false;
				}
				else if (arrItem2[1] == "i" && !TOBE.isNumeric(value)) 
				{
					this.gfn_Alert("msg.err.validator.chknumber.i", "warning", title, arrItem2[1]);
					return false;
				}
				else if (arrItem2[1] == "n" && !TOBE.isNumeric(value)) 
				{
					this.gfn_Alert("msg.err.validator.chknumber.n", "warning", title, arrItem2[1]);
					return false;
				}
				break;
			case "fromNum":
				if (!TOBE.isNumeric(value) || (parseFloat(arrItem2[1]) > parseFloat(value))) 
				{
					this.gfn_Alert("msg.err.validator.fromnum", "warning", title, arrItem2[1]);
					return false;
				}
				break;
			case "toNum":
				if (!TOBE.isNumeric(value) || (parseFloat(arrItem2[1]) < parseFloat(value))) 
				{
					this.gfn_Alert("msg.err.validator.tonum", "warning", title, arrItem2[1]);
					return false;
				}
				break;
			case "format":
				if (this.gfn_isNull(value)) 
				{
					break;
				}
				if (arrItem2[1] == "mail" && !this.gfn_checkEmail(value)) 
				{
					this.gfn_Alert("msg.err.validator.email", "warning", title);
					return false;
				}
				else if (arrItem2[1] == "phone" && !this.gfn_checkPhone(value)) 
				{
					this.gfn_Alert("msg.err.validator.phone", "warning", title);
					return false;
				}
				else if (arrItem2[1] == "url" && !this.gfn_checkURL(value)) 
				{
					this.gfn_Alert("msg.err.validator.url", "warning", title);
					return false;
				}
				else if (arrItem2[1] == "date" && !this.gfn_checkDate8(value)) 
				{
					this.gfn_Alert("msg.err.validator.date8", "warning", title);
					return false;
				}
				else if (arrItem2[1] == "date10" && !this.gfn_checkDate10(value)) 
				{
					this.gfn_Alert("msg.err.validator.date10", "warning", title);
					return false;
				}
				else if (arrItem2[1] == "zipcode" && !TOBE.isNumeric(value) && this.gfn_Length(this.gfn_Replace(value, " ", "")) != 6) 
				{
					this.gfn_Alert("msg.err.validator.zipcode", "warning", title);
					return false;
				}
				break;
		}
	}
	return true;
}

/**********************************************************************************
 * Function Name: gfn_checkMenuStat
 * Description  : 선택된 메뉴의 상태를 확인해서 오픈할 수 없을 경우에 메시지를 표시한다.
 * Arguments    : menuid: 메뉴아이디
 * Return       : bool: 오픈 가능 여부
 **********************************************************************************/
this.gfn_checkMenuStat = function (menuId)
{
 	var menuStat = this.gfn_getMenuInfo(menuId, "MENU_STAT");
 	if (menuStat == "MAKE") 
 	{
// 		this.gfn_Alert("msg.menu.stat.make", "infomation");
// 		return false;
 	}
	return true;
	
}


//lib_HTML5_Frame.xjs///////////////////////////////////////////////////////////////////////

/**********************************************************************************
 * Function Name: gfn_openMenu
 * Description  : 메뉴 아이디를  기준으로 신규 윈도우 화면을 생성하고 open 시킴
 * Arguments    : menuid: 메뉴아이디, bReload: Reload 여부, aArgs: 넘겨줄 Argument, favArgs:즐겨찾기에서 넘어왔을 경우체크
 * Return       : 없음
 **********************************************************************************/
this.gfn_openMenu = function (menuid, bReload, aArgs)
{
	if (this.gfn_isNull(menuid)) 
	{
		return;
	}

	var nRow = -1;
	var menuFilterGrp ='';
	/*
	if (this.gfn_isNull(favArgs)) {
		nRow = this.gfn_findData(application.gds_Menu, application.gv_MenuIdCol, menuid);
	} else {
		//즐겨찾게에서 넘어오면 application.gds_Menu를 해당 메뉴그룹으로 다시 filter 한다.
		menuFilterGrp = menuid.substring(0,1) +'000';		
		application.gds_Menu.filter(application.gv_MenuGIdCol + "=='"+menuFilterGrp+"' && MENU_LEVEL!=0");
		gv_leftFrame.form.ds_Menu.copyData(application.gds_Menu, true);
		application.gds_Menu.filter();
		
		nRow = this.gfn_findData(gv_leftFrame.form.ds_Menu, application.gv_MenuIdCol, menuid);
	}
	*/
	
	nRow = this.gfn_findData(application.gds_Menu, application.gv_MenuIdCol, menuid);
	if(nRow == -1)
	{
//		this.gfn_Alert("Menu가 존재하지 않습니다.");
		return;
	}

	 /* 단순히 리턴만 하는 Validation 은 필요없음
	if (this.gfn_isNull(this.gfn_getMenuInfo(menuid, application.gv_MenuUrlCol))) 
	{
		return;
	}

	if (this.gfn_checkMenuStat(menuid) == false) 
	{
		return;
	}
	*/
	
	var winid = this.gfn_getLookupData(application.gds_openMenu, application.gv_MenuIdCol, menuid, application.gv_WinIdCol);

	//이미 오픈된 화면이면 해당 탭으로 포커스만 옮겨 준다. (CSS 처리필요)
	if (this.gfn_isNull(winid) == false) 
	{
		if (this.gfn_activeFrame(winid, bReload, aArgs) == true) 
		{
			gv_AppTabPath.form.fn_moveTab(winid);
			return;
		}
	}

	this.gfn_openMenuRow(menuid, nRow, aArgs);
}

/**********************************************************************************
 * Function Name: gfn_activeFrame
 * Description  : 윈도우 키를 기준으로 열려있는 화면 여부 확인
 * Arguments    : winid: 윈도우 생성 키, bReload: 화면 Reload여부, aArgs:전달인자
 * Return       : 열린화면이면 true 아니면 false
 **********************************************************************************/
this.gfn_activeFrame = function (winid, bReload, aArgs)
{
	//trace("gfn_activeFrame : winid : "+winid+", bReload : "+bReload+", aArgs : "+aArgs);
	var framesInfo = gv_AppWorkFrameSet.frames;
	var formId = 0;
	for(var i=0; i<framesInfo.length; i++) {
		//trace(i+"th framesInfo.length : "+framesInfo.length+", framesInfo : "+framesInfo[i].name+", winid : "+winid);
		if(winid == framesInfo[i].name) {
			//trace("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! framesInfo[i].form : "+framesInfo[i].form.name);
			formId = framesInfo[i].name;
			break;
		}
	}
	if(this.gfn_isNull(winid)){return true;}
	/*
	if (application.gv_openOnlyOne == false && bReload == false) 
	{
		return false;
	}
	*/
	
// 
// 	for(var i = 0 ; i < framesInfo.length ; i++)
// 	{
// 		if(framesInfo[winid] != framesInfo[i]){	
// 			framesInfo[i].set_visible(false);
// 		}
// 	}
	//trace("debug 2  :::  gfn_activeFrame  ");	

	
	
	//trace("formId : "+formId);
	if(framesInfo[winid])
	{
		framesInfo[formId].form.setFocus();

		if (bReload == true) 
		{
			//framesInfo[winid].form.reload();
			framesInfo[formId].form.reload();
		}

		return true;
	}
	
	return false;
}


/**********************************************************************************
 * Function Name: gfn_openMenuRow
 * Description  : gds_openMenu의 해당 Row의 정보를 기준으로 신규 윈도우 화면을 생성하고 open 시킴
 * Arguments    : menuid: 메뉴아이디, nRow: gds_openMenu의 rowpostion, aArgs:전달인자
 * Return       : 없음
 **********************************************************************************/
this.gfn_openMenuRow = function (menuid, nRow, aArgs)
{
	var winid = "win" + menuid + "_" + application.gds_openMenu.getRowCount() + "_" + parseInt(Math.random() * 1000);
	var objNewWin = new ChildFrame;
	var strTitle;
	
	objNewWin.init(winid, "absolute", 0, 0, gv_AppWorkFrameSet.getOffsetWidth() - 0, gv_AppWorkFrameSet.getOffsetHeight() - 0);
	objNewWin.set_tooltiptext(winid);
	objNewWin.arguments = [];
	strTitle = this.gfn_getMenuInfo(menuid, application.gv_MenuNameCol);
	if (this.gfn_isNull(aArgs) == false) 
	{
		for (var prop; ; ) 
		{
			objNewWin.arguments[prop] = aArgs[prop];
		}
	}
 
	objNewWin.set_openstatus("maximize");  //새로운 폼이 열려지는 상태
	
	var sPageUrl = this.gfn_getLookupData(application.gds_Menu, application.gv_MenuIdCol, menuid, application.gv_MenuUrlCol);
	var sMenuNm = this.gfn_getLookupData(application.gds_Menu, application.gv_MenuIdCol, menuid, application.gv_MenuNameCol);
	gv_AppWorkFrameSet.addChild(winid, objNewWin);
	this.gfn_addOpenMenuDs(winid, menuid, strTitle);
	objNewWin.set_formurl("Frame::workFrame.xfdl");
	objNewWin.set_dragmovetype("all");
	objNewWin.set_showtitlebar(false);
	objNewWin.set_resizable(true);
	objNewWin.set_openstatus("maximize");
	objNewWin.arguments["winKey"]   =  winid;
	objNewWin.arguments["menuId"]   =  menuid;
	objNewWin.arguments["menuNm"]   =  sMenuNm;
	objNewWin.arguments["pageUrl"]   =  sPageUrl;
	objNewWin.show();
	gv_AppTabPath.form.fn_addTab(winid, strTitle);
	this.gfn_activeFrame(winid);
	
	/*
	if (this.gfn_getMenuInfo(menuid, application.gv_MenuOPTPCol) == "POP") 
	{
		objNewWin.showModeless(winid, null);
	} else {
	    var sPageUrl = this.gfn_getLookupData(application.gds_Menu, application.gv_MenuIdCol, menuid, application.gv_MenuUrlCol);
	    var sMenuNm = this.gfn_getLookupData(application.gds_Menu, application.gv_MenuIdCol, menuid, application.gv_MenuNameCol);
		gv_AppWorkFrameSet.addChild(winid, objNewWin);
		this.gfn_addOpenMenuDs(winid, menuid, strTitle);
		objNewWin.set_formurl("Frame::workFrame.xfdl");
	    objNewWin.set_dragmovetype("all");
	    objNewWin.set_showtitlebar(false);
	    objNewWin.set_resizable(true);
		objNewWin.set_openstatus("maximize");
		objNewWin.arguments["winKey"]   =  winid;
		objNewWin.arguments["menuId"]   =  menuid;
		objNewWin.arguments["menuNm"]   =  sMenuNm;
		objNewWin.arguments["pageUrl"]   =  sPageUrl;
		objNewWin.show();
		gv_AppTabPath.form.fn_addTab(winid, strTitle);
		this.gfn_activeFrame(winid);
	}
	*/
}



/**********************************************************************************
 * Function Name: gfn_addOpenMenuDs
 * Description  : 신규 생성된 윈도우(프레임) 화면을 gds_openMenu에 등록
 * Arguments    : winid: 윈도우아이디, menuid: 메뉴아이디, strTitle:타이틀
 * Return       : 없음
 **********************************************************************************/
this.gfn_addOpenMenuDs = function (winid, menuid, strTitle)
{
	var curRow = application.gds_openMenu.addRow();
	application.gds_openMenu.setColumn(curRow, application.gv_WinIdCol, winid);
	application.gds_openMenu.setColumn(curRow, application.gv_MenuIdCol, menuid);
	application.gds_openMenu.setColumn(curRow, "TITLE", strTitle);
}


///////////////////////////////////////////////////////////////////////
/**********************************************************************************
 * Function Name: gfn_findData
 * Description  : dataSet object에서 키에 해당되는 Row를 찾아서 rowpostion 전달
 * Arguments    : ObjDs:dataset, strIdCol:키칼럼, strId:키값,
 strSubCol:서브키칼럼, strSubId:서브 키값
 * Return       : rowpostion
 **********************************************************************************/
this.gfn_findData = function (ObjDs, strIdCol, strId, strSubCol, strSubId)
{
	//var arrArgument = this.gfn_findData.arguments;

	if (this.gfn_isNull(strSubCol)) 
	{
		return ObjDs.findRow(strIdCol, strId);
	}
	return ObjDs.findRowExpr(strIdCol + " == '" + strId + "' && " + strSubCol + " == '" + strSubId + "'");	
	
}

/**********************************************************************************
 * Function Name: gfn_getLookupData
 * Description  : dataSet object에서 키에 해당되는 Row를 찾아서 칼럼값을 전달
 * Arguments    : ObjDs:dataset, strIdCol:키칼럼, strId:키값,  strInfo: dataSet 칼럼,
 strSubCol:서브키칼럼, strSubId:서브 키값
 * Return       : 칼럼값
 **********************************************************************************/
this.gfn_getLookupData = function (ObjDs, strIdCol, strId, strInfo, strSubCol, strSubId)
{
	var strVal;
	var curRow = this.gfn_findData(ObjDs, strIdCol, strId, strSubCol, strSubId);
	
	if (curRow < 0) 
	{
		return "";
	}
	
	strVal = ObjDs.getColumn(curRow, strInfo);
	if (this.gfn_isNull(strVal)) 
	{
		return "";
	}

	return strVal;
}



//////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * Function Name: gfn_isNull
 * Description  : 입력값이 null에 해당하는 경우 모두를 한번에 체크한다.
 * Arguments    : Val : 체크할 문자열( 예 : null 또는 undefined 또는 "" 또는 "abc" )
 * Return       : Boolean,  Val이 undefined, null, NaN, "", Array.length = 0인 경우 = true
 이외의 경우 = false
 ******************************************************************************/
this.gfn_isNull = function (Val)
{
	if (new String(Val).valueOf() == "undefined") 
	{
		return true;
	}
	if (Val == null) 
	{
		return true;
	}
	if (("x" + Val == "xNaN") && (new String(Val.length).valueOf() == "undefined")) 
	{
		return true;
	}
	if (Val.length == 0) 
	{
		return true;
	}

	return false;
}

//////////////////////////////////////////////////////////
/**********************************************************************************
 * Function Name: gfn_getMenuInfo
 * Description  : menuid 를 기준으로 해당 메뉴의 칼럼값을 전달
 * Arguments    : menuid: 메뉴아이디, menuInfo: 메뉴의 칼럼
 * Return       : 칼럼값
 **********************************************************************************/
this.gfn_getMenuInfo = function (menuid, menuInfo)
{
	//trace("gfn_getMenuInfo : "+this.gfn_getLookupData(application.gds_Menu, application.gv_MenuIdCol, menuid, menuInfo));
	return this.gfn_getLookupData(application.gds_Menu, application.gv_MenuIdCol, menuid, menuInfo);
}

/**********************************************************************************
 * Function Name: gfn_getFrameAguments
 * Description  : child Frame에 등록한 아규먼트를 반환한다.
 * Arguments    : winKey, pageUrl 등등
 * Return       : 반환값
 **********************************************************************************/
this.gfn_getFrameAguments = function (sVal)
{
    return this.getOwnerFrame().arguments[sVal];
}
/**
 * 열려있는 윈도우 화면을 정렬
 * @param	: 	strType: 정렬 타입
 * @return	:   N/A
 */
this.gfn_ArrangeWin = function(strType) 
{
	// workFrame영역에 open된 childFrame 갯수
	var iFramesCnt = gv_AppWorkFrameSet.frames.length;
	
	//if (applicaton.gds_openMenu.getRowCount() < 1) return;

	switch(strType)
	{
		case "maximize" :
		for (var i=0; i<iFramesCnt; i++) 
		{
			gv_AppWorkFrameSet.frames[i].set_openstatus("maximize");		
			gv_AppWorkFrameSet.frames[i].set_showtitlebar(false);		
			gv_AppWorkFrameSet.frames[i].style.set_border("0 solid #006666ff");
		}
	
		
// 		trace("gv_AppWorkFrameSet.getActiveFrame() ==>"+gv_AppWorkFrameSet.getActiveFrame().name);
// 		gv_AppWorkFrameSet.getActiveFrame().set_showtitlebar(false);
// 		gv_AppWorkFrameSet.getActiveFrame().style.set_border("0 solid #006666ff");

		//trace('   gfn_ArrangeWin --------------------------------'+gv_AppWorkFrameSet.getActiveFrame().name +'/'+ gv_AppWorkFrameSet.getActiveFrame().openstatus );

        
	   break;
	   case "closeAll" :
		for (var i=iFramesCnt-1; i>=0; i--) 
		{			
            // trace("gv_AppWorkFrameSet.frames[i].name ==>"+gv_AppWorkFrameSet.frames[i].name);
            // trace("gv_AppTabPath.form ==>"+gv_AppTabPath.form);
			gv_AppTabPath.form.gfn_TabOnClose(gv_AppWorkFrameSet.frames[i].name);
		}
	    break;
	   case "hidden" :
		for (i=0; i<iFramesCnt; i++) 
		{
			gv_AppWorkFrameSet.frames[i].set_showtitlebar(true);
			gv_AppWorkFrameSet.frames[i].style.set_border("1 solid #7f7f7bff");
			gv_AppWorkFrameSet.frames[i].style.set_bordertype("round 3 3");
			gv_AppWorkFrameSet.frames[i].set_openstatus("minimize");		
		}
		
		gv_AppWorkFrameSet.arrange(strType);
	    break;
	    default :
		for (i=0; i<iFramesCnt; i++) 
		{			
			gv_AppWorkFrameSet.frames[i].set_showtitlebar(true);
			gv_AppWorkFrameSet.frames[i].style.set_border("1 solid #7f7f7bff");
			gv_AppWorkFrameSet.frames[i].style.set_bordertype("round 3 3");
			gv_AppWorkFrameSet.frames[i].set_openstatus("normal");				
		}
		
		gv_AppWorkFrameSet.arrange(strType);
	    break;
	   
	}
}


/***************************************************************************************
* FUNCTION NAME : gfn_closeMenu
* DESCRIPTION   : 선택된 WINID 에 해당하는 화면을 Active(Tab/Frame/Menu).
* ARGUMENT      : sWinId - 화면 ChildFrame Object Name
                  bCloseFrame - Frame Close 여부
* RETURN        : 
***************************************************************************************/
function gfn_closeMenu(sWinID, bCloseFrame)
{	
	if(this.gfn_isEmpty(bCloseFrame)) bCloseFrame = true;

	var objActiveFrame='';
	var sAcctiveWinID = "";
	var nRow = application.gds_OpenMenu.findRow("WIN_ID", sWinID);

	if(nRow > -1) application.gds_OpenMenu.deleteRow(nRow);
	
	//trace( '### 3333333333'+ gv_AppWorkFrameSet.getActiveFrame());
	if(gv_AppWorkFrameSet.getActiveFrame() != null)
		objActiveFrame = gv_AppWorkFrameSet.getActiveFrame().name;
	
	gv_AppTabPath.form.gfn_TabOnClose(sWinID);

	//if(bCloseFrame) gfn_closeFrame(sWinID);

	if(objActiveFrame == sWinID && gds_OpenMenu.rowcount > 0){
		if(nRow >= gds_OpenMenu.rowcount)
			sAcctiveWinID = gds_OpenMenu.getColumn(gds_OpenMenu.rowcount-1, "WINID");
		else
			sAcctiveWinID = gds_OpenMenu.getColumn(nRow, "WINID");

		gfn_activeMenu(sAcctiveWinID);
	}
	else{
		gv_tabFrame.form.btn_openMenuList.enable = false;
		gv_tabFrame.form.btn_prevTab.enable = false;
		gv_tabFrame.form.btn_nextTab.enable = false;
		gv_tabFrame.form.btn_MdiList.enable = false;
		gv_tabFrame.form.btn_max.enable = false;
		gv_tabFrame.form.btn_cas.enable = false;
		gv_tabFrame.form.btn_closeAll.enable = false;
	}
}

/*****************************************************************************************
* 함  수  명	: 	gfn_closeFrame
* 입      력	: 	strID: 윈도우 생성키
* 반      환	:   true/false 정상닫힘/닫힘취소 
* 기      능	: 	윈도우 타이틀 탭 닫힘 처리
*****************************************************************************************/
function gfn_closeFrame(winKey)
{
 	gv_AppWorkFrameSet.frames[winKey].form.f_close();
}


]]></Script>
