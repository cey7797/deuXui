<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript5.0"><![CDATA[/*
 ===============================================================================
 ==  Grid관련 공통함수들은 여기에 작성한다.
 ===============================================================================
 ● gfn_gridSort      : 그리드의 Sort를 처리한다.
 ● gfn_clearSortMark : Seleted Column을 제외한 Sort Mark 제거
 ● gfn_setGridCheckAll : Grid Head중 check box가 있을 경우, check box 클릭 이벤트 발생시 전체 row에 대한 check/uncheck 설정 함수
 ★ gfn_exportExcel    : Grid를 Excel로 Export하는 함수
 ★ gfn_setPage    : 일반 페이징처리를 공통화 처리 하는 함수 (조회후 호출)
 ★ gfn_clearPage    : 페이징 네비게이션 초기화하는 함수
 ★ gfn_setScrollPage : 스크롤 페이징처리를 공통화 처리 하는 함수 (조회후 호출)
 */

// 헤더 클릭시 정렬
this.fv_constAscMark = "↓";
this.fv_constDescMark = "↑";
this.fv_constSortFlag = false;
this.fv_exportObject;
this.fv_exportFileName;
/*******************************************************************************
 * Function Name: gfn_gridSort
 * Description  : 그리드의 Sort를 처리한다.
 * Arguments    : object Grid, GridClickEventInfo e
 * Return       : None
 ******************************************************************************/
this.gfn_gridSort = function (obj:Grid, e:GridClickEventInfo)
{
	// 컬럼의 정렬방식을 'head'의 text에 "↑,↓"여부로 판단.
	// 이미지로 대체 가능.
	var strType = obj.getCellProperty("head", e.cell, "displaytype");
	if (strType == "checkbox") 
	{
		return;
	}

	var bindDs = this.gfn_getDataset(obj.binddataset);
	if (bindDs.rowcount == 0) 
	{
		return false;
	}

	var BodyColId = (obj.getCellProperty("body", e.col, "text")).toString().split(":");
	bindDs.set_enableevent(false);
	for (var i = 0; i < obj.getCellCount("head"); i++) 
	{
		if (obj.getCellText(-1, i) == "undefined") 
		{
			continue;
		}

		var strHeadText = obj.getCellText(-1, i);

		if (i == e.cell) 
		{
			if (strHeadText.substr(strHeadText.length - 1) == this.fv_constAscMark) 
			{
				obj.setCellProperty("head", i, "text", strHeadText.substr(0, strHeadText.length - 1) + this.fv_constDescMark);
				bindDs.set_keystring(("S:-" + BodyColId[1]));
			}
			else if (strHeadText.substr(strHeadText.length - 1) == this.fv_constDescMark) 
			{
				obj.setCellProperty("head", i, "text", strHeadText.substr(0, strHeadText.length - 1) + this.fv_constAscMark);
				bindDs.set_keystring(("S:+" + BodyColId[1]));
			}
			else 
			{
				obj.setCellProperty("head", i, "text", strHeadText + this.fv_constAscMark);
				bindDs.set_keystring(("S:+" + BodyColId[1]));
			}
		}
		else 
		{
			// 정렬표시 삭제
			if (strHeadText.substr(strHeadText.length - 1) == this.fv_constAscMark || strHeadText.substr(strHeadText.length - 1) == this.fv_constDescMark) 
			{
				obj.setCellProperty("head", i, "text", strHeadText.substr(0, strHeadText.length - 1));
			}
		}
	}
	bindDs.set_enableevent(true);
}

/*******************************************************************************
 * Function Name: gfn_clearSortMark
 * Description  : Sort Mark 제거
 * Arguments    : grdObj: Grid, nCell: cell index
 * Return       : None
 ******************************************************************************/
this.gfn_clearSortMark = function (obj, nCell)
{
	var nColCnt = obj.getCellCount("head");
	var sRepText;

	for (var ii = 0; ii < nColCnt; ii++) 
	{
		if (nCell != null && nCell == ii) 
		{
			continue;
		}

		sRepText = obj.getCellProperty("head", ii, "text").split(this.fv_constAscMark).join("").split(this.fv_constDescMark).join("");
		obj.setCellProperty("head", ii, "text", sRepText);
	}
	
	var bindDs = this.gfn_getDataset(obj.binddataset);
	bindDs.set_keystring("");
}

/********************************************************************************
 * Function Name	: gfnSetGridCheckAll										*
 * Desc				: Grid Head중 check box가 있을 경우, check box 클릭 이벤트 발생시 전체 row에 대한 check/uncheck 설정 함수	*
 * Parameter		: obj = Grid												*
 *					  e = GridClickEventInfo									*
 * Return 			: 															*
 ********************************************************************************/
this.gfn_setGridCheckAll = function (obj:Grid, e:GridClickEventInfo)
{
	if (obj.readonly == true) 
	{
		return;
	}

	var strVal;
	var strChkCol;
	var dsObj;

	dsObj = this.gfn_getDataset(obj.binddataset);
	strChkCol = this.gfn_nvl(obj.getCellProperty("body", e.col, "text"), "");
	strChkCol = strChkCol.split("bind:").join("");

	var strType = obj.getCellProperty("head", e.cell, "displaytype");
	if (strType != "checkbox") 
	{
		return;
	}

	// Head셋팅
	strVal = obj.getCellProperty("head", e.cell, "text");
	if (this.gfn_isNull(strVal)) 
	{
		strVal = "0";
	}

	if (strVal == "0") 
	{
		obj.setCellProperty("head", e.cell, "text", '1');
		strVal = "1";
	}
	else 
	{
		obj.setCellProperty("head", e.cell, "text", '0');
		strVal = "0";
	}

	// Body셋팅
	dsObj.set_enableevent(false);
	for (var i = 0; i < dsObj.rowcount; i++) 
	{
		dsObj.setColumn(i, strChkCol, strVal);
	}
	dsObj.set_enableevent(true);
}

/********************************************************************************
 * Function Name	: gfn_exportExcel										*
 * Desc				: Grid를 Excel로 Export하는 함수
 * Parameter		: obj = 단일Export -  Grid Object  , 다수Export - Array Objec[Grid Object,Grid Object]							*
 *					  sFileName - Export될 파일명									*
 * Return 			: 															*
 ********************************************************************************/
this.gfn_exportExcel = function(obj,sFileName)
{

	fv_exportObject = obj;
	fv_exportFileName = sFileName;
	
	this.setWaitCursor(true,true);
	
	var nIndex = this.findEventHandler("ontimer", this._gfn_exportExcelOnTimer, this);
	
	if(nIndex < 0) this.addEventHandler("ontimer", this._gfn_exportExcelOnTimer, this);
	this.setTimer(ct_exportTimerId,100);
    
	
	
	//trace( "\n"+ "exportData() result : " + result);
}

this._gfn_exportExcelOnTimer = function(obj,e)
{
    if(e.timerid == ct_exportTimerId)
    {
        this.killTimer(ct_exportTimerId);
        this._gfn_exportExcelProcess();
    }
}

this._gfn_exportExcelEnd = function(obj,e)
{
    this.setWaitCursor(false,true);
}

this._gfn_exportExcelProcess = function()
{
    var obj = fv_exportObject;
    var sFileName = fv_exportFileName;
  	var dToday = new Date();
	var oGrid;
	var sSheetName;
	var strType = obj.toString().toUpperCase();
	if(!this.gfn_isNull(sFileName)){
		sFileName = dToday.getTime() + "_" + sFileName;
	}else{
		sFileName = dToday.getTime();
	}
 
	this.exportObj = new ExcelExportObject();
	
	var sSvcUrl = application.services["svcurl"].url+"xeni/XExportImport";
	 
 	this.exportObj.addEventHandler("onsuccess", this._gfn_exportExcelEnd, this);
 	this.exportObj.addEventHandler("onerror", this._gfn_exportExcelEnd, this);
	
	this.exportObj.set_exporttype(TOBE.ExportTypes.EXCEL2007);
	//this.exportObj.set_exporturl("http://172.10.11.160:8080/xeni/XExportImport");
	this.exportObj.set_exporturl(sSvcUrl);
	this.exportObj.set_exportfilename(sFileName);	
	
	if(strType == "[OBJECT GRID]")
	{
	    oGrid = obj;
	    sSheetName = ct_sheet+"1";
	    this.exportObj.addExportItem(TOBE.ExportItemTypes.GRID, oGrid,  sSheetName + "!A1","allband","allrecord","suppress","none","background","font", "both");
	}
	else
	{
	    for(var i=0; i<obj.length; i++)
	    {
	        sSheetName = ct_sheet+(i+1);
	        oGrid = obj[i];
	        this.exportObj.addExportItem(TOBE.ExportItemTypes.GRID, oGrid,  sSheetName + "!A1","allband","allrecord","suppress","none","background","font", "both");
	    }
	}

	var result = this.exportObj.exportData();   

}

// 2. Grid Cell Copy & Past 테스트.
this.gfn_gridOnkeydown = function (obj:Grid, e:KeyEventInfo)
{
	// Ctrl + C
	if (e.ctrlKey && e.keycode == 67) 
	{
		this.gfn_clipboardCopy(obj);

		// Ctrl + V
	}
	else if (e.ctrlKey && e.keycode == 86) 
	{
		this.gfn_clipboardPaste(obj);
	}
}

this.gfn_clipboardCopy = function (objGrid)
{
	var orgDataset = this.gfn_getDataset(objGrid.binddataset);

	var strColID;
	var strValue;

	var strClipboard = "";

	var nAreaStartRow;
	var nAreaEndRow;
	var nAreaStartCol;
	var nAreaEndCol;

	if (objGrid.selecttype == "area") 
	{
		nAreaStartRow = objGrid.selectstartrow;
		nAreaEndRow = objGrid.selectendrow;
		nAreaStartCol = objGrid.selectstartcol;
		nAreaEndCol = objGrid.selectendcol;
	}
	else 
	{
		nAreaStartRow = objGrid.selectstartrow;
		nAreaEndRow = objGrid.selectendrow;
		nAreaStartCol = 0;
		nAreaEndCol = objGrid.getCellCount("Body")-1;
	}

	for (var nRow = nAreaStartRow; nRow <= nAreaEndRow; nRow++) 
	{
		for (var nCell = nAreaStartCol; nCell < nAreaEndCol; nCell++) 
		{
			strColID = objGrid.getCellProperty("body", nCell, "text");
			strValue = this.gfn_isEmpty(orgDataset.getColumn(nRow, strColID.substr(5)));
			strClipboard = strClipboard + strValue + ct_separator;
		}

		strClipboard = strClipboard.substr(0, strClipboard.length - 1);
		strClipboard = strClipboard + "\n";
	}

	strClipboard = strClipboard.substr(0, strClipboard.length - 1);
	system.setClipboard("CF_TEXT", strClipboard);
	application.gv_arrClipboard = strClipboard;

	return;
}



/*********************************************************************
 * 기능 : Clipboard에 Copy된 내용을 그리드의 선택된 영역에 Paste 한다.
 * 인수 : objGrid       : Area Select 된 Grid
 ct_separator  : Colunm 구분자.
 arrEditColor  : Edit Color Table
 * 예제 : grd_fn_ClipboardPaste(objGrid, ",", arrEditColor);
 *********************************************************************/
this.gfn_clipboardPaste = function (objGrid)
{
	var orgDataset = this.gfn_getDataset(objGrid.binddataset);

	var nSearchRow = 0;
	var nSearchCol = 0;
	var strColID;
	var strValue;
	var strEditType;
	var strBgColor;
    var strClipboardData = "";
    
	// 숫자 자릿수 구분은 comma 를 사용하기 때문에 호환을 위해서 comma 를 제거한다.
	try{
	   strClipboardData = system.getClipboard("CF_TEXT").split(",").join("");
	}catch(e){}
	
	if(this.gfn_isNull(strClipboardData))
	{
	    strClipboardData = application.gv_arrClipboard.split(",").join("");
	}

	// 유럽의 숫자 자릿수 구분은 space 를 사용하기 때문에 호환을 위해서 space 를 제거한다.
	strClipboardData = strClipboardData.split(" ").join("");

	var strClipboardRecord = strClipboardData.split("\n");


	var strClipboardColunm;

	var nAreaStartRow;
	var nAreaEndRow;
	var nAreaStartCol;
	var nAreaEndCol;

	if (objGrid.selecttype == "area") 
	{
		nAreaStartRow = objGrid.selectstartrow;
		nAreaEndRow = objGrid.selectendrow;
		nAreaStartCol = objGrid.selectstartcol;
		nAreaEndCol = objGrid.selectendcol;
	}
	else 
	{
		nAreaStartRow = objGrid.selectstartrow;
		nAreaEndRow = objGrid.selectendrow;
		nAreaStartCol = 0;
		nAreaEndCol = objGrid.getCellCount("Body")-1;
	}

	for (var nRow = nAreaStartRow; nRow < (parseInt(nAreaStartRow) + parseInt(strClipboardRecord.length)); nRow++) 
	{
		strClipboardColunm = strClipboardRecord[nSearchRow].split(ct_separator);

		nSearchCol = 0;

		var nAreaCell = parseInt(nAreaStartCol) + parseInt(strClipboardColunm.length);

		for (var nCell = nAreaStartCol; nCell < nAreaCell; nCell++) 
		{
			strColID = objGrid.getCellProperty("body", nCell, "text").substr(5);
			strEditType = objGrid.getCellProperty("body", nCell, "edittype");
			strValue = strClipboardColunm[nSearchCol];

            //에디터 타입이 none이거나 값이 없으면 카피 안함
			if(!(strEditType == "none" || this.gfn_isNull(strValue))) 
			{
				orgDataset.setColumn(nRow, strColID, strValue);
			}
			nSearchCol++;
		}
		nSearchRow++;
	}
	return;
}

/*******************************************************************************
 * Function Name: gfn_setPage
 * Description	: 일반 페이징처리를 공통화 처리 하는 함수
 * Arguments	: obj - 페이징 네비게이션 Div 오브젝트
                  oShDs - viewPage, rowcount가 포함된 데이터셋
                  nTotalCnt - 전체 카운트
 * Return 		: None
 ********************************************************************************/
this.gfn_setPage = function(obj,oShDs,nTotalCnt)
{

     nTotalCnt = parseInt(nTotalCnt);
     trace("oShDs ==>"+oShDs.saveXML());
     nViewPage = parseInt(oShDs.getColumn(0,ct_viewPage));
     nRowCount = parseInt(oShDs.getColumn(0,ct_rowCount));
     this.gfn_clearPage(obj);

    if(nTotalCnt > 0)
    {
        obj.stc_totalCntLabel.set_visible(true);
        obj.stc_totalCnt.set_visible(true);    
        obj.stc_totalCnt.set_text(nTotalCnt);
        
        this._createPageNavigation(obj.div_navigation,nTotalCnt,nViewPage,nRowCount);
    }
    
}

this._createPageNavigation = function(obj,nTotalCnt,nViewPage,nRowCount)
{
    var oBtn = Base.XPComp.query(obj, "prop[name] ^= 'btn_no'",0);
    var oComBtn = Base.XPComp.query(obj, "prop[name] ^= 'btn_ac'",0);
    
    var nGroupPerPage = 10;
    var nTotalPage = Math.floor((nTotalCnt/nRowCount) + (nTotalCnt%nRowCount>0 ? 1 : 0));
    var nGroupNo =  Math.floor(nViewPage/nGroupPerPage+(nViewPage%nGroupPerPage>0 ? 1:0));
    var nGroupPageEnd =  nGroupNo*nGroupPerPage;	
    var	nGroupPageStart = nGroupPageEnd-(nGroupPerPage-1);	
    var nWidth = obj.width;
    var sLeft  = obj.left;
    var nLeft = parseFloat(sLeft.replace("%"));

    nGroupPageEnd = (nGroupPageEnd>nTotalPage) ? nTotalPage : nGroupPageEnd;
   
    var nBtnWidth = 35;
    var nDivLeftPlus = 0.7;
    
    trace(nGroupPageEnd-nGroupPageStart);
    var nBtnCnt = (nGroupPageEnd-nGroupPageStart)+1;
    
    var nTargetWidth = nWidth-(Math.abs(nGroupPerPage-nBtnCnt)*nBtnWidth);
    var sTargetLeft = nLeft+(Math.abs(nGroupPerPage-nBtnCnt)*nDivLeftPlus)+"%";
    var bVisible;
    var bEnable;
    var nBtnText = nGroupPageStart;
    var nTargetViewPage;

    for(var i=0; i<oBtn.length; i++)
    {
        bVisible = (nBtnText > nGroupPageEnd) ? false : true;
        bEnable = (nBtnText == nViewPage) ? false : true;
        oBtn[i].targetObjId = obj.parent.name;
        oBtn[i].targetPage = nBtnText;
        oBtn[i].set_text(nBtnText);
        oBtn[i].set_enable(bEnable);
        oBtn[i].set_visible(bVisible);
        oBtn[i].setEventHandler("onclick", this._onclickPageNavigate, this);
        nBtnText++;
    }
    
    for(var i=0; i<oComBtn.length; i++)
    {
       switch(oComBtn[i].name)
       {
           case "btn_acFirst" : 
              bEnable = (nTotalPage == 1 || nViewPage == 1) ? false : true;
              nTargetViewPage = 1;
           break;
           case "btn_acLast" : 
              bEnable = (nTotalPage == 1 || nViewPage == nTotalPage) ? false : true;
              nTargetViewPage = nTotalPage;
           break;              
           case "btn_acPrev" : 
              bEnable = (nViewPage < nGroupPerPage) ? false : true;
              nTargetViewPage = (nGroupPageStart-nGroupPerPage);
           break;    
           case "btn_acNext" : 
              bEnable = (nGroupPageEnd == nTotalPage) ? false : true;
              nTargetViewPage = (nGroupPageStart+nGroupPerPage);
           break;                         
       }
       
	   oComBtn[i].targetObjId = obj.parent.name;
	   oComBtn[i].targetPage = nTargetViewPage;
	   oComBtn[i].set_enable(bEnable);       
       oComBtn[i].setEventHandler("onclick", this._onclickPageNavigate, this);
    }
    
    obj.set_visible(true);
    obj.set_width(nTargetWidth);
    obj.set_left(sTargetLeft);  
    
}

this._onclickPageNavigate = function(obj,e)
{
    var sTargetId = obj.targetObjId;
    var nViewPage = obj.targetPage;
    this.fn_pageAfter(sTargetId,nViewPage);
}

/*******************************************************************************
 * Function Name: gfn_clearPage
 * Description	: 페이징 네비게이션 초기화하는 함수
 * Arguments	: obj - 페이징 네비게이션 오브젝트
 * Return 		: None
 ********************************************************************************/
this.gfn_clearPage = function(obj)
{
    var oNavi = obj.div_navigation;
    var aObj = oNavi.components;
    
    var nDefaultLeft = "32.18%";
    var nDefaultWidth = 443;
    
    for(var i=0; i<aObj.length; i++)
    {
        aObj[i].set_visible(true);
        aObj[i].set_enable(true);
    }
    
	obj.stc_totalCntLabel.set_visible(false);
	obj.stc_totalCnt.set_visible(false);  
	    
    oNavi.set_left(nDefaultLeft);
    oNavi.set_width(nDefaultWidth);
    oNavi.set_visible(false);
}

/*******************************************************************************
 * Function Name: gfn_setScrollPage
 * Description	: 스크롤 페이징처리를 공통화 처리 하는 함수
 * Arguments	: obj - 페이징 네비게이션 Div 오브젝트
                  oShDs - viewPage, rowcount가 포함된 데이터셋
                  oGrid - 대상 그리드 오브젝트
                  nTotalCnt - 전체 카운트
 * Return 		: None
 ********************************************************************************/
this.gfn_setScrollPage = function(obj,oShDs,oGrid,nTotalCnt)
{

     nTotalCnt = parseInt(nTotalCnt);
     nViewPage = parseInt(oShDs.getColumn(0,ct_viewPage));
     nRowCount = parseInt(oShDs.getColumn(0,ct_rowCount));
     this.gfn_clearPage(obj);
    
    if(nTotalCnt > 0)
    {
        obj.stc_totalCntLabel.set_visible(true);
        obj.stc_totalCnt.set_visible(true);    
        obj.stc_totalCnt.set_text(nTotalCnt);
        var oDs = this.gfn_getDataset(oGrid.binddataset);

        if(this.gfn_isNull(oGrid.totalCnt))
        {
			oGrid.totalCnt = nTotalCnt;
			oGrid.viewPage = nViewPage;
			oGrid.rowCount = nRowCount;
			oGrid.targetObjId = obj.name;
			oGrid.targetSearchDs = oShDs.name;
			oDs.scrollEvent = "Y";
			oGrid.setEventHandler("onvscroll", this._onvscrollPageNavigate, this);        
        }
    }
}

this._onvscrollPageNavigate = function(obj,e)
{
   if(e.type == "wheellastover")
   {
      var oDs = this.gfn_getDataset(obj.binddataset);
      var oShDs = this.gfn_getDataset(obj.targetSearchDs);
      var sTargetId = obj.targetObjId;
      var nViewPage = parseInt(oShDs.getColumn(0,ct_viewPage));
      var nRowCount = parseInt(oShDs.getColumn(0,ct_rowCount));      
      var nTotlCnt = obj.totalCnt;

      if(oDs.rowcount < parseInt(obj.totalCnt))
      {
		  if(nRowCount != parseInt(obj.rowCount))
		  {
		     nViewPage = 1;
		     obj.rowCount = nRowCount;
			 oDs.scrollEvent = "N";
	 	  }
	 	  else
		  {
		     nViewPage = parseInt(obj.viewPage)+1;
			 oDs.scrollEvent = "Y";
		  }

		  obj.viewPage = nViewPage;
		  this.fn_pageAfter(sTargetId,nViewPage);      
      }
   }
}/*
 ===============================================================================
 ==  Grid관련 공통함수들은 여기에 작성한다.
 ===============================================================================
 ● gfn_gridSort      : 그리드의 Sort를 처리한다.
 ● gfn_clearSortMark : Seleted Column을 제외한 Sort Mark 제거
 ● gfn_setGridCheckAll : Grid Head중 check box가 있을 경우, check box 클릭 이벤트 발생시 전체 row에 대한 check/uncheck 설정 함수
 ★ gfn_exportExcel    : Grid를 Excel로 Export하는 함수
 ★ gfn_setPage    : 일반 페이징처리를 공통화 처리 하는 함수 (조회후 호출)
 ★ gfn_clearPage    : 페이징 네비게이션 초기화하는 함수
 ★ gfn_setScrollPage : 스크롤 페이징처리를 공통화 처리 하는 함수 (조회후 호출)
 */

// 헤더 클릭시 정렬
this.fv_constAscMark = "↓";
this.fv_constDescMark = "↑";
this.fv_constSortFlag = false;
this.fv_exportObject;
this.fv_exportFileName;
/*******************************************************************************
 * Function Name: gfn_gridSort
 * Description  : 그리드의 Sort를 처리한다.
 * Arguments    : object Grid, GridClickEventInfo e
 * Return       : None
 ******************************************************************************/
this.gfn_gridSort = function (obj:Grid, e:GridClickEventInfo)
{
	// 컬럼의 정렬방식을 'head'의 text에 "↑,↓"여부로 판단.
	// 이미지로 대체 가능.
	var strType = obj.getCellProperty("head", e.cell, "displaytype");
	if (strType == "checkbox") 
	{
		return;
	}

	var bindDs = this.gfn_getDataset(obj.binddataset);
	if (bindDs.rowcount == 0) 
	{
		return false;
	}

	var BodyColId = (obj.getCellProperty("body", e.col, "text")).toString().split(":");
	bindDs.set_enableevent(false);
	for (var i = 0; i < obj.getCellCount("head"); i++) 
	{
		if (obj.getCellText(-1, i) == "undefined") 
		{
			continue;
		}

		var strHeadText = obj.getCellText(-1, i);

		if (i == e.cell) 
		{
			if (strHeadText.substr(strHeadText.length - 1) == this.fv_constAscMark) 
			{
				obj.setCellProperty("head", i, "text", strHeadText.substr(0, strHeadText.length - 1) + this.fv_constDescMark);
				bindDs.set_keystring(("S:-" + BodyColId[1]));
			}
			else if (strHeadText.substr(strHeadText.length - 1) == this.fv_constDescMark) 
			{
				obj.setCellProperty("head", i, "text", strHeadText.substr(0, strHeadText.length - 1) + this.fv_constAscMark);
				bindDs.set_keystring(("S:+" + BodyColId[1]));
			}
			else 
			{
				obj.setCellProperty("head", i, "text", strHeadText + this.fv_constAscMark);
				bindDs.set_keystring(("S:+" + BodyColId[1]));
			}
		}
		else 
		{
			// 정렬표시 삭제
			if (strHeadText.substr(strHeadText.length - 1) == this.fv_constAscMark || strHeadText.substr(strHeadText.length - 1) == this.fv_constDescMark) 
			{
				obj.setCellProperty("head", i, "text", strHeadText.substr(0, strHeadText.length - 1));
			}
		}
	}
	bindDs.set_enableevent(true);
}

/*******************************************************************************
 * Function Name: gfn_clearSortMark
 * Description  : Sort Mark 제거
 * Arguments    : grdObj: Grid, nCell: cell index
 * Return       : None
 ******************************************************************************/
this.gfn_clearSortMark = function (obj, nCell)
{
	var nColCnt = obj.getCellCount("head");
	var sRepText;

	for (var ii = 0; ii < nColCnt; ii++) 
	{
		if (nCell != null && nCell == ii) 
		{
			continue;
		}

		sRepText = obj.getCellProperty("head", ii, "text").split(this.fv_constAscMark).join("").split(this.fv_constDescMark).join("");
		obj.setCellProperty("head", ii, "text", sRepText);
	}
	
	var bindDs = this.gfn_getDataset(obj.binddataset);
	bindDs.set_keystring("");
}

/********************************************************************************
 * Function Name	: gfnSetGridCheckAll										*
 * Desc				: Grid Head중 check box가 있을 경우, check box 클릭 이벤트 발생시 전체 row에 대한 check/uncheck 설정 함수	*
 * Parameter		: obj = Grid												*
 *					  e = GridClickEventInfo									*
 * Return 			: 															*
 ********************************************************************************/
this.gfn_setGridCheckAll = function (obj:Grid, e:GridClickEventInfo)
{
	if (obj.readonly == true) 
	{
		return;
	}

	var strVal;
	var strChkCol;
	var dsObj;

	dsObj = this.gfn_getDataset(obj.binddataset);
	strChkCol = this.gfn_nvl(obj.getCellProperty("body", e.col, "text"), "");
	strChkCol = strChkCol.split("bind:").join("");

	var strType = obj.getCellProperty("head", e.cell, "displaytype");
	if (strType != "checkbox") 
	{
		return;
	}

	// Head셋팅
	strVal = obj.getCellProperty("head", e.cell, "text");
	if (this.gfn_isNull(strVal)) 
	{
		strVal = "0";
	}

	if (strVal == "0") 
	{
		obj.setCellProperty("head", e.cell, "text", '1');
		strVal = "1";
	}
	else 
	{
		obj.setCellProperty("head", e.cell, "text", '0');
		strVal = "0";
	}

	// Body셋팅
	dsObj.set_enableevent(false);
	for (var i = 0; i < dsObj.rowcount; i++) 
	{
		dsObj.setColumn(i, strChkCol, strVal);
	}
	dsObj.set_enableevent(true);
}

/********************************************************************************
 * Function Name	: gfn_exportExcel										*
 * Desc				: Grid를 Excel로 Export하는 함수
 * Parameter		: obj = 단일Export -  Grid Object  , 다수Export - Array Objec[Grid Object,Grid Object]							*
 *					  sFileName - Export될 파일명									*
 * Return 			: 															*
 ********************************************************************************/
this.gfn_exportExcel = function(obj,sFileName)
{

	fv_exportObject = obj;
	fv_exportFileName = sFileName;
	
	this.setWaitCursor(true,true);
	
	var nIndex = this.findEventHandler("ontimer", this._gfn_exportExcelOnTimer, this);
	
	if(nIndex < 0) this.addEventHandler("ontimer", this._gfn_exportExcelOnTimer, this);
	this.setTimer(ct_exportTimerId,100);
    
	
	
	//trace( "\n"+ "exportData() result : " + result);
}

this._gfn_exportExcelOnTimer = function(obj,e)
{
    if(e.timerid == ct_exportTimerId)
    {
        this.killTimer(ct_exportTimerId);
        this._gfn_exportExcelProcess();
    }
}

this._gfn_exportExcelEnd = function(obj,e)
{
    this.setWaitCursor(false,true);
}

this._gfn_exportExcelProcess = function()
{
    var obj = fv_exportObject;
    var sFileName = fv_exportFileName;
  	var dToday = new Date();
	var oGrid;
	var sSheetName;
	var strType = obj.toString().toUpperCase();
	if(!this.gfn_isNull(sFileName)){
		sFileName = dToday.getTime() + "_" + sFileName;
	}else{
		sFileName = dToday.getTime();
	}
 
	this.exportObj = new ExcelExportObject();
	
	var sSvcUrl = application.services["svcurl"].url+"xeni/XExportImport";
	 
 	this.exportObj.addEventHandler("onsuccess", this._gfn_exportExcelEnd, this);
 	this.exportObj.addEventHandler("onerror", this._gfn_exportExcelEnd, this);
	
	this.exportObj.set_exporttype(TOBE.ExportTypes.EXCEL2007);
	//this.exportObj.set_exporturl("http://172.10.11.160:8080/xeni/XExportImport");
	this.exportObj.set_exporturl(sSvcUrl);
	this.exportObj.set_exportfilename(sFileName);	
	
	if(strType == "[OBJECT GRID]")
	{
	    oGrid = obj;
	    sSheetName = ct_sheet+"1";
	    this.exportObj.addExportItem(TOBE.ExportItemTypes.GRID, oGrid,  sSheetName + "!A1","allband","allrecord","suppress","none","background","font", "both");
	}
	else
	{
	    for(var i=0; i<obj.length; i++)
	    {
	        sSheetName = ct_sheet+(i+1);
	        oGrid = obj[i];
	        this.exportObj.addExportItem(TOBE.ExportItemTypes.GRID, oGrid,  sSheetName + "!A1","allband","allrecord","suppress","none","background","font", "both");
	    }
	}

	var result = this.exportObj.exportData();   

}

// 2. Grid Cell Copy & Past 테스트.
this.gfn_gridOnkeydown = function (obj:Grid, e:KeyEventInfo)
{
	// Ctrl + C
	if (e.ctrlKey && e.keycode == 67) 
	{
		this.gfn_clipboardCopy(obj);

		// Ctrl + V
	}
	else if (e.ctrlKey && e.keycode == 86) 
	{
		this.gfn_clipboardPaste(obj);
	}
}

this.gfn_clipboardCopy = function (objGrid)
{
	var orgDataset = this.gfn_getDataset(objGrid.binddataset);

	var strColID;
	var strValue;

	var strClipboard = "";

	var nAreaStartRow;
	var nAreaEndRow;
	var nAreaStartCol;
	var nAreaEndCol;

	if (objGrid.selecttype == "area") 
	{
		nAreaStartRow = objGrid.selectstartrow;
		nAreaEndRow = objGrid.selectendrow;
		nAreaStartCol = objGrid.selectstartcol;
		nAreaEndCol = objGrid.selectendcol;
	}
	else 
	{
		nAreaStartRow = objGrid.selectstartrow;
		nAreaEndRow = objGrid.selectendrow;
		nAreaStartCol = 0;
		nAreaEndCol = objGrid.getCellCount("Body")-1;
	}

	for (var nRow = nAreaStartRow; nRow <= nAreaEndRow; nRow++) 
	{
		for (var nCell = nAreaStartCol; nCell < nAreaEndCol; nCell++) 
		{
			strColID = objGrid.getCellProperty("body", nCell, "text");
			strValue = this.gfn_isEmpty(orgDataset.getColumn(nRow, strColID.substr(5)));
			strClipboard = strClipboard + strValue + ct_separator;
		}

		strClipboard = strClipboard.substr(0, strClipboard.length - 1);
		strClipboard = strClipboard + "\n";
	}

	strClipboard = strClipboard.substr(0, strClipboard.length - 1);
	system.setClipboard("CF_TEXT", strClipboard);
	application.gv_arrClipboard = strClipboard;

	return;
}



/*********************************************************************
 * 기능 : Clipboard에 Copy된 내용을 그리드의 선택된 영역에 Paste 한다.
 * 인수 : objGrid       : Area Select 된 Grid
 ct_separator  : Colunm 구분자.
 arrEditColor  : Edit Color Table
 * 예제 : grd_fn_ClipboardPaste(objGrid, ",", arrEditColor);
 *********************************************************************/
this.gfn_clipboardPaste = function (objGrid)
{
	var orgDataset = this.gfn_getDataset(objGrid.binddataset);

	var nSearchRow = 0;
	var nSearchCol = 0;
	var strColID;
	var strValue;
	var strEditType;
	var strBgColor;
    var strClipboardData = "";
    
	// 숫자 자릿수 구분은 comma 를 사용하기 때문에 호환을 위해서 comma 를 제거한다.
	try{
	   strClipboardData = system.getClipboard("CF_TEXT").split(",").join("");
	}catch(e){}
	
	if(this.gfn_isNull(strClipboardData))
	{
	    strClipboardData = application.gv_arrClipboard.split(",").join("");
	}

	// 유럽의 숫자 자릿수 구분은 space 를 사용하기 때문에 호환을 위해서 space 를 제거한다.
	strClipboardData = strClipboardData.split(" ").join("");

	var strClipboardRecord = strClipboardData.split("\n");


	var strClipboardColunm;

	var nAreaStartRow;
	var nAreaEndRow;
	var nAreaStartCol;
	var nAreaEndCol;

	if (objGrid.selecttype == "area") 
	{
		nAreaStartRow = objGrid.selectstartrow;
		nAreaEndRow = objGrid.selectendrow;
		nAreaStartCol = objGrid.selectstartcol;
		nAreaEndCol = objGrid.selectendcol;
	}
	else 
	{
		nAreaStartRow = objGrid.selectstartrow;
		nAreaEndRow = objGrid.selectendrow;
		nAreaStartCol = 0;
		nAreaEndCol = objGrid.getCellCount("Body")-1;
	}

	for (var nRow = nAreaStartRow; nRow < (parseInt(nAreaStartRow) + parseInt(strClipboardRecord.length)); nRow++) 
	{
		strClipboardColunm = strClipboardRecord[nSearchRow].split(ct_separator);

		nSearchCol = 0;

		var nAreaCell = parseInt(nAreaStartCol) + parseInt(strClipboardColunm.length);

		for (var nCell = nAreaStartCol; nCell < nAreaCell; nCell++) 
		{
			strColID = objGrid.getCellProperty("body", nCell, "text").substr(5);
			strEditType = objGrid.getCellProperty("body", nCell, "edittype");
			strValue = strClipboardColunm[nSearchCol];

            //에디터 타입이 none이거나 값이 없으면 카피 안함
			if(!(strEditType == "none" || this.gfn_isNull(strValue))) 
			{
				orgDataset.setColumn(nRow, strColID, strValue);
			}
			nSearchCol++;
		}
		nSearchRow++;
	}
	return;
}

/*******************************************************************************
 * Function Name: gfn_setPage
 * Description	: 일반 페이징처리를 공통화 처리 하는 함수
 * Arguments	: obj - 페이징 네비게이션 Div 오브젝트
                  oShDs - viewPage, rowcount가 포함된 데이터셋
                  nTotalCnt - 전체 카운트
 * Return 		: None
 ********************************************************************************/
this.gfn_setPage = function(obj,oShDs,nTotalCnt)
{

     nTotalCnt = parseInt(nTotalCnt);
     trace("oShDs ==>"+oShDs.saveXML());
     nViewPage = parseInt(oShDs.getColumn(0,ct_viewPage));
     nRowCount = parseInt(oShDs.getColumn(0,ct_rowCount));
     this.gfn_clearPage(obj);

    if(nTotalCnt > 0)
    {
        obj.stc_totalCntLabel.set_visible(true);
        obj.stc_totalCnt.set_visible(true);    
        obj.stc_totalCnt.set_text(nTotalCnt);
        
        this._createPageNavigation(obj.div_navigation,nTotalCnt,nViewPage,nRowCount);
    }
    
}

this._createPageNavigation = function(obj,nTotalCnt,nViewPage,nRowCount)
{
    var oBtn = Base.XPComp.query(obj, "prop[name] ^= 'btn_no'",0);
    var oComBtn = Base.XPComp.query(obj, "prop[name] ^= 'btn_ac'",0);
    
    var nGroupPerPage = 10;
    var nTotalPage = Math.floor((nTotalCnt/nRowCount) + (nTotalCnt%nRowCount>0 ? 1 : 0));
    var nGroupNo =  Math.floor(nViewPage/nGroupPerPage+(nViewPage%nGroupPerPage>0 ? 1:0));
    var nGroupPageEnd =  nGroupNo*nGroupPerPage;	
    var	nGroupPageStart = nGroupPageEnd-(nGroupPerPage-1);	
    var nWidth = obj.width;
    var sLeft  = obj.left;
    var nLeft = parseFloat(sLeft.replace("%"));

    nGroupPageEnd = (nGroupPageEnd>nTotalPage) ? nTotalPage : nGroupPageEnd;
   
    var nBtnWidth = 35;
    var nDivLeftPlus = 0.7;
    
    trace(nGroupPageEnd-nGroupPageStart);
    var nBtnCnt = (nGroupPageEnd-nGroupPageStart)+1;
    
    var nTargetWidth = nWidth-(Math.abs(nGroupPerPage-nBtnCnt)*nBtnWidth);
    var sTargetLeft = nLeft+(Math.abs(nGroupPerPage-nBtnCnt)*nDivLeftPlus)+"%";
    var bVisible;
    var bEnable;
    var nBtnText = nGroupPageStart;
    var nTargetViewPage;

    for(var i=0; i<oBtn.length; i++)
    {
        bVisible = (nBtnText > nGroupPageEnd) ? false : true;
        bEnable = (nBtnText == nViewPage) ? false : true;
        oBtn[i].targetObjId = obj.parent.name;
        oBtn[i].targetPage = nBtnText;
        oBtn[i].set_text(nBtnText);
        oBtn[i].set_enable(bEnable);
        oBtn[i].set_visible(bVisible);
        oBtn[i].setEventHandler("onclick", this._onclickPageNavigate, this);
        nBtnText++;
    }
    
    for(var i=0; i<oComBtn.length; i++)
    {
       switch(oComBtn[i].name)
       {
           case "btn_acFirst" : 
              bEnable = (nTotalPage == 1 || nViewPage == 1) ? false : true;
              nTargetViewPage = 1;
           break;
           case "btn_acLast" : 
              bEnable = (nTotalPage == 1 || nViewPage == nTotalPage) ? false : true;
              nTargetViewPage = nTotalPage;
           break;              
           case "btn_acPrev" : 
              bEnable = (nViewPage < nGroupPerPage) ? false : true;
              nTargetViewPage = (nGroupPageStart-nGroupPerPage);
           break;    
           case "btn_acNext" : 
              bEnable = (nGroupPageEnd == nTotalPage) ? false : true;
              nTargetViewPage = (nGroupPageStart+nGroupPerPage);
           break;                         
       }
       
	   oComBtn[i].targetObjId = obj.parent.name;
	   oComBtn[i].targetPage = nTargetViewPage;
	   oComBtn[i].set_enable(bEnable);       
       oComBtn[i].setEventHandler("onclick", this._onclickPageNavigate, this);
    }
    
    obj.set_visible(true);
    obj.set_width(nTargetWidth);
    obj.set_left(sTargetLeft);  
    
}

this._onclickPageNavigate = function(obj,e)
{
    var sTargetId = obj.targetObjId;
    var nViewPage = obj.targetPage;
    this.fn_pageAfter(sTargetId,nViewPage);
}

/*******************************************************************************
 * Function Name: gfn_clearPage
 * Description	: 페이징 네비게이션 초기화하는 함수
 * Arguments	: obj - 페이징 네비게이션 오브젝트
 * Return 		: None
 ********************************************************************************/
this.gfn_clearPage = function(obj)
{
    var oNavi = obj.div_navigation;
    var aObj = oNavi.components;
    
    var nDefaultLeft = "32.18%";
    var nDefaultWidth = 443;
    
    for(var i=0; i<aObj.length; i++)
    {
        aObj[i].set_visible(true);
        aObj[i].set_enable(true);
    }
    
	obj.stc_totalCntLabel.set_visible(false);
	obj.stc_totalCnt.set_visible(false);  
	    
    oNavi.set_left(nDefaultLeft);
    oNavi.set_width(nDefaultWidth);
    oNavi.set_visible(false);
}

/*******************************************************************************
 * Function Name: gfn_setScrollPage
 * Description	: 스크롤 페이징처리를 공통화 처리 하는 함수
 * Arguments	: obj - 페이징 네비게이션 Div 오브젝트
                  oShDs - viewPage, rowcount가 포함된 데이터셋
                  oGrid - 대상 그리드 오브젝트
                  nTotalCnt - 전체 카운트
 * Return 		: None
 ********************************************************************************/
this.gfn_setScrollPage = function(obj,oShDs,oGrid,nTotalCnt)
{

     nTotalCnt = parseInt(nTotalCnt);
     nViewPage = parseInt(oShDs.getColumn(0,ct_viewPage));
     nRowCount = parseInt(oShDs.getColumn(0,ct_rowCount));
     this.gfn_clearPage(obj);
    
    if(nTotalCnt > 0)
    {
        obj.stc_totalCntLabel.set_visible(true);
        obj.stc_totalCnt.set_visible(true);    
        obj.stc_totalCnt.set_text(nTotalCnt);
        var oDs = this.gfn_getDataset(oGrid.binddataset);

        if(this.gfn_isNull(oGrid.totalCnt))
        {
			oGrid.totalCnt = nTotalCnt;
			oGrid.viewPage = nViewPage;
			oGrid.rowCount = nRowCount;
			oGrid.targetObjId = obj.name;
			oGrid.targetSearchDs = oShDs.name;
			oDs.scrollEvent = "Y";
			oGrid.setEventHandler("onvscroll", this._onvscrollPageNavigate, this);        
        }
    }
}

this._onvscrollPageNavigate = function(obj,e)
{
   if(e.type == "wheellastover")
   {
      var oDs = this.gfn_getDataset(obj.binddataset);
      var oShDs = this.gfn_getDataset(obj.targetSearchDs);
      var sTargetId = obj.targetObjId;
      var nViewPage = parseInt(oShDs.getColumn(0,ct_viewPage));
      var nRowCount = parseInt(oShDs.getColumn(0,ct_rowCount));      
      var nTotlCnt = obj.totalCnt;

      if(oDs.rowcount < parseInt(obj.totalCnt))
      {
		  if(nRowCount != parseInt(obj.rowCount))
		  {
		     nViewPage = 1;
		     obj.rowCount = nRowCount;
			 oDs.scrollEvent = "N";
	 	  }
	 	  else
		  {
		     nViewPage = parseInt(obj.viewPage)+1;
			 oDs.scrollEvent = "Y";
		  }

		  obj.viewPage = nViewPage;
		  this.fn_pageAfter(sTargetId,nViewPage);      
      }
   }
}]]></Script>
